{"file_contents":{"README.md":{"content":"# FounderOS - AI-Powered Startup Platform\n\nFounderOS is a comprehensive AI-powered platform for non-technical entrepreneurs to build, validate, and scale startups.\n\n## Features\n\n- **Idea Validation Engine** - AI-powered market research and competitor analysis\n- **No-Code MVP Generator** - Build prototypes without coding\n- **Legal & Finance Auto-Setup** - Automated business registration and compliance  \n- **Go-to-Market Playbooks** - Customized marketing strategies\n- **Investor-Ready Deck Builder** - AI-generated pitch decks\n- **Founder Network Matching** - Connect with co-founders and mentors\n\n## Tech Stack\n\n- **Frontend**: Next.js 14, TypeScript, Tailwind CSS\n- **UI Components**: Shadcn/ui (Radix UI primitives)\n- **Backend**: Supabase (PostgreSQL + Auth)\n- **Analytics**: Vercel Analytics\n- **Fonts**: Geist Sans & Mono\n\n## Quick Deploy to Vercel\n\n1. **Fork this repository**\n\n2. **Set up Supabase**:\n   - Create a new project at [supabase.com](https://supabase.com)\n   - Run the SQL scripts in the `/scripts` folder to set up your database\n   - Get your project credentials from Settings → API\n\n3. **Deploy to Vercel**:\n   \n   [![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/yourusername/founderos)\n\n4. **Configure Environment Variables**:\n   \n   In your Vercel dashboard, add these environment variables:\n   \n   ```\n   NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co\n   NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key\n   SUPABASE_SERVICE_ROLE_KEY=your-service-role-key\n   DATABASE_URL=your-database-connection-string\n   ```\n\n5. **Set up Supabase Auth**:\n   - In Supabase dashboard → Authentication → URL Configuration\n   - Add your Vercel domain to \"Site URL\"\n   - Add `https://your-domain.vercel.app/**` to \"Redirect URLs\"\n\n## Local Development\n\n1. **Clone the repository**:\n   ```bash\n   git clone https://github.com/yourusername/founderos.git\n   cd founderos\n   ```\n\n2. **Install dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Set up environment variables**:\n   ```bash\n   cp .env.example .env.local\n   # Edit .env.local with your Supabase credentials\n   ```\n\n4. **Run the development server**:\n   ```bash\n   npm run dev\n   ```\n\n5. **Open [http://localhost:3000](http://localhost:3000)** in your browser\n\n## Database Setup\n\nRun these SQL scripts in your Supabase SQL editor (in order):\n\n1. `scripts/001_create_users_and_profiles.sql`\n2. `scripts/002_create_startup_ideas.sql`\n3. `scripts/003_create_mvp_projects.sql`\n4. `scripts/004_create_pitch_decks.sql`\n5. `scripts/005_create_founder_network.sql`\n6. `scripts/006_create_legal_documents.sql`\n\n## Environment Variables\n\n| Variable | Required | Description |\n|----------|----------|-------------|\n| `NEXT_PUBLIC_SUPABASE_URL` | Yes | Your Supabase project URL |\n| `NEXT_PUBLIC_SUPABASE_ANON_KEY` | Yes | Supabase anonymous/public key |\n| `SUPABASE_SERVICE_ROLE_KEY` | Yes | Supabase service role key (server-side) |\n| `DATABASE_URL` | Yes | PostgreSQL connection string |\n\n## Project Structure\n\n```\n├── app/                    # Next.js 14 App Router\n│   ├── api/               # API routes\n│   ├── auth/              # Authentication pages\n│   ├── dashboard/         # Protected dashboard pages\n│   └── globals.css        # Global styles\n├── components/            # React components\n│   └── ui/               # Shadcn/ui components\n├── lib/                   # Utility libraries\n│   └── supabase/         # Supabase client configuration\n├── scripts/               # Database SQL scripts\n├── public/               # Static assets\n└── styles/               # Additional stylesheets\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Submit a pull request\n\n## License\n\nMIT License - see LICENSE file for details","size_bytes":3892},"middleware.ts":{"content":"import { updateSession } from \"@/lib/supabase/middleware\"\nimport type { NextRequest } from \"next/server\"\nimport { NextResponse } from \"next/server\"\n\nexport async function middleware(request: NextRequest) {\n  // Handle missing Supabase credentials gracefully during development\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n    return NextResponse.next();\n  }\n  \n  try {\n    return await updateSession(request)\n  } catch (error) {\n    console.warn(\"Supabase middleware error:\", error);\n    return NextResponse.next();\n  }\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - images - .svg, .png, .jpg, .jpeg, .gif, .webp\n     * Feel free to modify this pattern to include more paths.\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n}\n","size_bytes":997},"next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.\n","size_bytes":228},"replit.md":{"content":"# FounderOS - AI-Powered Startup Platform\n\n## Overview\nFounderOS is a comprehensive AI-powered platform for non-technical entrepreneurs to build, validate, and scale startups. The application provides tools for idea validation, MVP generation, pitch deck creation, and startup management.\n\n## Recent Changes\n- September 24, 2025: Initial GitHub import setup for Replit environment\n\n## Project Architecture\n- **Framework**: Next.js 14 with TypeScript\n- **Styling**: Tailwind CSS + Shadcn/ui components\n- **Backend**: Supabase (authentication, database)\n- **UI Components**: Radix UI primitives\n- **Analytics**: Vercel Analytics\n- **Fonts**: Geist Sans & Mono\n\n## Key Features\n1. Idea Validation Engine - AI-powered market research and competitor analysis\n2. No-Code MVP Generator - Build prototypes without coding\n3. Legal & Finance Auto-Setup - Automated business registration and compliance\n4. Go-to-Market Playbooks - Customized marketing strategies\n5. Investor-Ready Deck Builder - AI-generated pitch decks\n6. Founder Network Matching - Connect with co-founders and mentors\n\n## Database Schema\nThe project includes SQL scripts for:\n- Users and profiles management\n- Startup ideas tracking\n- MVP projects\n- Pitch decks\n- Founder network\n- Legal documents\n\n## Current Setup Status\n- [x] Dependencies installed and packages configured\n- [x] LSP errors resolved \n- [x] Development server running on port 5000\n- [x] Next.js configured for Replit environment (cache control, host headers)\n- [x] Deployment configured for autoscale\n- [x] All Supabase credentials configured (URL, anon key, service role key)\n- [x] API routes properly configured with admin client for database operations\n- [x] Authentication fully functional\n- [x] Vercel deployment files created (.env.example, README.md, vercel.json)\n\n## Environment Variables Configured\n- ✅ DATABASE_URL\n- ✅ NEXT_PUBLIC_SUPABASE_URL  \n- ✅ NEXT_PUBLIC_SUPABASE_ANON_KEY\n- ✅ SUPABASE_SERVICE_ROLE_KEY\n\n## Vercel Deployment Ready\nThe project is now ready for easy deployment to Vercel with:\n- README.md with deployment instructions\n- .env.example with required environment variables\n- vercel.json configuration file\n- Proper server-side API configuration\n\n## Development Notes\n- Uses Next.js App Router\n- Requires Supabase environment variables\n- Dark theme enabled by default\n- TypeScript strict mode enabled","size_bytes":2362},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  /* Updated theme to match dark modern aesthetic from design inspiration */\n  --background: oklch(0.08 0 0);\n  --foreground: oklch(0.98 0 0);\n  --card: oklch(0.12 0 0);\n  --card-foreground: oklch(0.98 0 0);\n  --popover: oklch(0.12 0 0);\n  --popover-foreground: oklch(0.98 0 0);\n  --primary: oklch(0.98 0 0);\n  --primary-foreground: oklch(0.08 0 0);\n  --secondary: oklch(0.18 0 0);\n  --secondary-foreground: oklch(0.98 0 0);\n  --muted: oklch(0.18 0 0);\n  --muted-foreground: oklch(0.65 0 0);\n  --accent: oklch(0.65 0.15 270);\n  --accent-foreground: oklch(0.98 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.98 0 0);\n  --border: oklch(0.18 0 0);\n  --input: oklch(0.18 0 0);\n  --ring: oklch(0.65 0.15 270);\n  --chart-1: oklch(0.65 0.15 270);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.5rem;\n  --sidebar: oklch(0.12 0 0);\n  --sidebar-foreground: oklch(0.98 0 0);\n  --sidebar-primary: oklch(0.65 0.15 270);\n  --sidebar-primary-foreground: oklch(0.98 0 0);\n  --sidebar-accent: oklch(0.18 0 0);\n  --sidebar-accent-foreground: oklch(0.98 0 0);\n  --sidebar-border: oklch(0.18 0 0);\n  --sidebar-ring: oklch(0.65 0.15 270);\n}\n\n.dark {\n  --background: oklch(0.08 0 0);\n  --foreground: oklch(0.98 0 0);\n  --card: oklch(0.12 0 0);\n  --card-foreground: oklch(0.98 0 0);\n  --popover: oklch(0.12 0 0);\n  --popover-foreground: oklch(0.98 0 0);\n  --primary: oklch(0.98 0 0);\n  --primary-foreground: oklch(0.08 0 0);\n  --secondary: oklch(0.18 0 0);\n  --secondary-foreground: oklch(0.98 0 0);\n  --muted: oklch(0.18 0 0);\n  --muted-foreground: oklch(0.65 0 0);\n  --accent: oklch(0.65 0.15 270);\n  --accent-foreground: oklch(0.98 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.98 0 0);\n  --border: oklch(0.18 0 0);\n  --input: oklch(0.18 0 0);\n  --ring: oklch(0.65 0.15 270);\n  --chart-1: oklch(0.65 0.15 270);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.12 0 0);\n  --sidebar-foreground: oklch(0.98 0 0);\n  --sidebar-primary: oklch(0.65 0.15 270);\n  --sidebar-primary-foreground: oklch(0.98 0 0);\n  --sidebar-accent: oklch(0.18 0 0);\n  --sidebar-accent-foreground: oklch(0.98 0 0);\n  --sidebar-border: oklch(0.18 0 0);\n  --sidebar-ring: oklch(0.65 0.15 270);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4377},"app/layout.tsx":{"content":"import type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { GeistSans } from \"geist/font/sans\"\nimport { GeistMono } from \"geist/font/mono\"\nimport { Analytics } from \"@vercel/analytics/next\"\nimport { Suspense } from \"react\"\nimport \"./globals.css\"\n\nexport const metadata: Metadata = {\n  title: \"FounderOS - Your AI Co-Founder\",\n  description:\n    \"The complete AI-powered platform for non-technical entrepreneurs to build, validate, and scale startups\",\n  generator: \"v0.app\",\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\" className=\"dark\">\n      <body className={`font-sans ${GeistSans.variable} ${GeistMono.variable}`}>\n        <Suspense fallback={null}>{children}</Suspense>\n        <Analytics />\n      </body>\n    </html>\n  )\n}\n","size_bytes":832},"app/page.tsx":{"content":"import { Button } from \"@/components/ui/button\"\nimport { Card } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ArrowRight, Lightbulb, Code, FileText, Users, TrendingUp, Shield } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function HomePage() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-8\">\n              <Link href=\"/\" className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                  <span className=\"text-accent-foreground font-bold text-sm\">F</span>\n                </div>\n                <span className=\"text-xl font-semibold text-foreground\">FounderOS</span>\n              </Link>\n              <div className=\"hidden md:flex space-x-6\">\n                <a href=\"#features\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Features\n                </a>\n                <a href=\"#pricing\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  Pricing\n                </a>\n                <a href=\"#about\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                  About\n                </a>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" className=\"text-muted-foreground hover:text-foreground\" asChild>\n                <Link href=\"/auth/login\">Sign In</Link>\n              </Button>\n              <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                <Link href=\"/auth/sign-up\">Get Started</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <Badge variant=\"secondary\" className=\"mb-6 text-accent\">\n            AI-Powered Startup Platform\n          </Badge>\n          <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-balance mb-6\">\n            Your AI co-founder for <span className=\"text-accent\">building startups</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground text-balance mb-8 max-w-3xl mx-auto leading-relaxed\">\n            The complete platform for non-technical entrepreneurs to validate ideas, build MVPs, and scale startups with\n            AI-powered tools and guidance.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Button\n              size=\"lg\"\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90 text-lg px-8 py-3\"\n              asChild\n            >\n              <Link href=\"/auth/sign-up\">\n                Start Building <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Link>\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-3 bg-transparent\">\n              Watch Demo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Trusted By Section */}\n      <section className=\"py-12 px-4 sm:px-6 lg:px-8 border-b border-border\">\n        <div className=\"max-w-7xl mx-auto\">\n          <p className=\"text-center text-muted-foreground mb-8\">Trusted by entrepreneurs worldwide</p>\n          <div className=\"flex justify-center items-center space-x-12 opacity-60\">\n            <div className=\"text-2xl font-bold\">TechCrunch</div>\n            <div className=\"text-2xl font-bold\">Forbes</div>\n            <div className=\"text-2xl font-bold\">Y Combinator</div>\n            <div className=\"text-2xl font-bold\">Product Hunt</div>\n            <div className=\"text-2xl font-bold\">AngelList</div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section id=\"features\" className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-5xl font-bold text-balance mb-6\">Everything you need to build a startup</h2>\n            <p className=\"text-xl text-muted-foreground text-balance max-w-3xl mx-auto leading-relaxed\">\n              From idea validation to investor-ready pitches, FounderOS provides all the tools and guidance you need in\n              one integrated platform.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <Card className=\"p-6 bg-card border-border hover:border-accent/50 transition-colors\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <Lightbulb className=\"h-5 w-5 text-accent\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Idea Validation Engine</h3>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                AI-powered market research, competitor analysis, and validation frameworks to test your startup idea\n                before you build.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 bg-card border-border hover:border-accent/50 transition-colors\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <Code className=\"h-5 w-5 text-accent\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">No-Code MVP Generator</h3>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Build functional prototypes and MVPs without coding. Generate landing pages, apps, and workflows with AI\n                assistance.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 bg-card border-border hover:border-accent/50 transition-colors\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"h-5 w-5 text-accent\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Legal & Finance Auto-Setup</h3>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Automated business registration, legal document generation, and financial setup to get your startup\n                legally compliant.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 bg-card border-border hover:border-accent/50 transition-colors\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"h-5 w-5 text-accent\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Go-to-Market Playbooks</h3>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Customized marketing strategies, launch plans, and growth tactics tailored to your industry and target\n                market.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 bg-card border-border hover:border-accent/50 transition-colors\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"h-5 w-5 text-accent\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Investor-Ready Deck Builder</h3>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                AI-generated pitch decks, financial projections, and investor materials that follow proven frameworks\n                and best practices.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 bg-card border-border hover:border-accent/50 transition-colors\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <Users className=\"h-5 w-5 text-accent\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Founder Network Matching</h3>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Connect with co-founders, advisors, and mentors based on your needs, skills, and startup stage.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-card/50\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 text-center\">\n            <div>\n              <div className=\"text-4xl font-bold text-accent mb-2\">10,000+</div>\n              <div className=\"text-muted-foreground\">Startups Launched</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-accent mb-2\">$500M+</div>\n              <div className=\"text-muted-foreground\">Funding Raised</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-accent mb-2\">85%</div>\n              <div className=\"text-muted-foreground\">Success Rate</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-accent mb-2\">30 Days</div>\n              <div className=\"text-muted-foreground\">Average MVP Time</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-5xl font-bold text-balance mb-6\">\n              From idea to launch in weeks, not months\n            </h2>\n            <p className=\"text-xl text-muted-foreground text-balance max-w-3xl mx-auto leading-relaxed\">\n              Our AI-powered platform guides you through every step of building a startup, providing tools and expertise\n              when you need them.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-accent\">1</span>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Validate Your Idea</h3>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Use our AI validation engine to research your market, analyze competitors, and validate demand before\n                building.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-accent\">2</span>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Build Your MVP</h3>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Create functional prototypes and MVPs using our no-code tools and AI-generated components.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <span className=\"text-2xl font-bold text-accent\">3</span>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Launch & Scale</h3>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Execute go-to-market strategies, pitch to investors, and scale your startup with ongoing AI guidance.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-card/50\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl md:text-5xl font-bold text-balance mb-6\">Ready to build your startup?</h2>\n          <p className=\"text-xl text-muted-foreground text-balance mb-8 leading-relaxed\">\n            Join thousands of entrepreneurs who have successfully launched their startups with FounderOS. Start your\n            journey today.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n            <Button\n              size=\"lg\"\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90 text-lg px-8 py-3\"\n              asChild\n            >\n              <Link href=\"/auth/sign-up\">\n                Start Free Trial <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Link>\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-3 bg-transparent\">\n              Schedule Demo\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                  <span className=\"text-accent-foreground font-bold text-sm\">F</span>\n                </div>\n                <span className=\"text-xl font-semibold\">FounderOS</span>\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Your AI co-founder for building successful startups.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Features\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Pricing\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Templates\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Integrations\n                  </a>\n                </li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Resources</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Documentation\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Blog\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Case Studies\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Community\n                  </a>\n                </li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    About\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Careers\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Contact\n                  </a>\n                </li>\n                <li>\n                  <a href=\"#\" className=\"hover:text-foreground transition-colors\">\n                    Privacy\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-border mt-8 pt-8 text-center text-muted-foreground\">\n            <p>&copy; 2025 FounderOS. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  )\n}\n","size_bytes":17367},"components/dashboard-layout.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport Link from \"next/link\"\nimport { usePathname, useRouter } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Lightbulb, Code, FileText, Users, TrendingUp, Shield, Settings, LogOut, Menu, X, Home } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: Home },\n  { name: \"Ideas\", href: \"/dashboard/ideas\", icon: Lightbulb },\n  { name: \"MVP Builder\", href: \"/dashboard/mvp\", icon: Code },\n  { name: \"Pitch Decks\", href: \"/dashboard/pitch\", icon: FileText },\n  { name: \"Network\", href: \"/dashboard/network\", icon: Users },\n  { name: \"Legal & Finance\", href: \"/dashboard/legal\", icon: Shield },\n  { name: \"Growth\", href: \"/dashboard/growth\", icon: TrendingUp },\n]\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode\n}\n\nexport function DashboardLayout({ children }: DashboardLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const pathname = usePathname()\n  const router = useRouter()\n\n  const handleSignOut = async () => {\n    const supabase = createClient()\n    await supabase.auth.signOut()\n    router.push(\"/\")\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile sidebar */}\n      <div className={cn(\"fixed inset-0 z-50 lg:hidden\", sidebarOpen ? \"block\" : \"hidden\")}>\n        <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm\" onClick={() => setSidebarOpen(false)} />\n        <div className=\"fixed inset-y-0 left-0 w-64 bg-card border-r border-border\">\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <Link href=\"/dashboard\" className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                <span className=\"text-accent-foreground font-bold text-sm\">F</span>\n              </div>\n              <span className=\"text-xl font-semibold text-foreground\">FounderOS</span>\n            </Link>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => setSidebarOpen(false)}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <nav className=\"p-4 space-y-2\">\n            {navigation.map((item) => (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors\",\n                  pathname === item.href\n                    ? \"bg-accent/10 text-accent\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-muted/20\",\n                )}\n                onClick={() => setSidebarOpen(false)}\n              >\n                <item.icon className=\"h-4 w-4\" />\n                <span>{item.name}</span>\n              </Link>\n            ))}\n          </nav>\n          <div className=\"absolute bottom-4 left-4 right-4 space-y-2\">\n            <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n              <Link href=\"/dashboard/settings\">\n                <Settings className=\"h-4 w-4 mr-3\" />\n                Settings\n              </Link>\n            </Button>\n            <Button variant=\"ghost\" className=\"w-full justify-start\" onClick={handleSignOut}>\n              <LogOut className=\"h-4 w-4 mr-3\" />\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden lg:fixed lg:inset-y-0 lg:left-0 lg:w-64 lg:block\">\n        <div className=\"flex flex-col h-full bg-card border-r border-border\">\n          <div className=\"flex items-center p-4 border-b border-border\">\n            <Link href=\"/dashboard\" className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                <span className=\"text-accent-foreground font-bold text-sm\">F</span>\n              </div>\n              <span className=\"text-xl font-semibold text-foreground\">FounderOS</span>\n            </Link>\n          </div>\n          <nav className=\"flex-1 p-4 space-y-2\">\n            {navigation.map((item) => (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={cn(\n                  \"flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors\",\n                  pathname === item.href\n                    ? \"bg-accent/10 text-accent\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-muted/20\",\n                )}\n              >\n                <item.icon className=\"h-4 w-4\" />\n                <span>{item.name}</span>\n              </Link>\n            ))}\n          </nav>\n          <div className=\"p-4 space-y-2 border-t border-border\">\n            <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n              <Link href=\"/dashboard/settings\">\n                <Settings className=\"h-4 w-4 mr-3\" />\n                Settings\n              </Link>\n            </Button>\n            <Button variant=\"ghost\" className=\"w-full justify-start\" onClick={handleSignOut}>\n              <LogOut className=\"h-4 w-4 mr-3\" />\n              Sign Out\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        {/* Mobile header */}\n        <div className=\"lg:hidden flex items-center justify-between p-4 border-b border-border bg-card/50\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => setSidebarOpen(true)}>\n            <Menu className=\"h-4 w-4\" />\n          </Button>\n          <Link href=\"/dashboard\" className=\"flex items-center space-x-2\">\n            <div className=\"w-6 h-6 bg-accent rounded-lg flex items-center justify-center\">\n              <span className=\"text-accent-foreground font-bold text-xs\">F</span>\n            </div>\n            <span className=\"text-lg font-semibold text-foreground\">FounderOS</span>\n          </Link>\n          <div className=\"w-8\" /> {/* Spacer for centering */}\n        </div>\n\n        {children}\n      </div>\n    </div>\n  )\n}\n","size_bytes":6294},"components/slide-editor.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Save, Plus, Trash2, Move, Eye, Type, ImageIcon, BarChart } from \"lucide-react\"\n\ninterface SlideEditorProps {\n  slides: any[]\n  onSlidesChange: (slides: any[]) => void\n  onSave: () => void\n}\n\nconst slideTemplates = [\n  { id: \"title\", name: \"Title Slide\", icon: Type },\n  { id: \"content\", name: \"Content Slide\", icon: Type },\n  { id: \"image\", name: \"Image Slide\", icon: ImageIcon },\n  { id: \"chart\", name: \"Chart Slide\", icon: BarChart },\n]\n\nexport function SlideEditor({ slides, onSlidesChange, onSave }: SlideEditorProps) {\n  const [selectedSlide, setSelectedSlide] = useState(0)\n  const [isPreview, setIsPreview] = useState(false)\n\n  const addSlide = (template: string) => {\n    const newSlide = {\n      title: \"New Slide\",\n      content: {\n        title: \"Slide Title\",\n        description: \"Slide content goes here...\",\n      },\n      template,\n    }\n    const newSlides = [...slides, newSlide]\n    onSlidesChange(newSlides)\n    setSelectedSlide(newSlides.length - 1)\n  }\n\n  const deleteSlide = (index: number) => {\n    if (slides.length <= 1) return\n    const newSlides = slides.filter((_, i) => i !== index)\n    onSlidesChange(newSlides)\n    setSelectedSlide(Math.max(0, selectedSlide - 1))\n  }\n\n  const moveSlide = (from: number, to: number) => {\n    const newSlides = [...slides]\n    const [movedSlide] = newSlides.splice(from, 1)\n    newSlides.splice(to, 0, movedSlide)\n    onSlidesChange(newSlides)\n    setSelectedSlide(to)\n  }\n\n  const updateSlide = (index: number, updates: any) => {\n    const newSlides = [...slides]\n    newSlides[index] = { ...newSlides[index], ...updates }\n    onSlidesChange(newSlides)\n  }\n\n  const currentSlide = slides[selectedSlide]\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 h-full\">\n      {/* Slide List */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold text-foreground\">Slides</h3>\n          <Select onValueChange={addSlide}>\n            <SelectTrigger className=\"w-auto\">\n              <Plus className=\"h-4 w-4\" />\n            </SelectTrigger>\n            <SelectContent>\n              {slideTemplates.map((template) => (\n                <SelectItem key={template.id} value={template.id}>\n                  <div className=\"flex items-center space-x-2\">\n                    <template.icon className=\"h-4 w-4\" />\n                    <span>{template.name}</span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n          {slides.map((slide, index) => (\n            <Card\n              key={index}\n              className={`cursor-pointer transition-colors ${\n                selectedSlide === index ? \"border-accent bg-accent/5\" : \"border-border hover:border-accent/50\"\n              }`}\n              onClick={() => setSelectedSlide(index)}\n            >\n              <CardContent className=\"p-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-foreground text-sm\">{slide.title}</p>\n                    <p className=\"text-xs text-muted-foreground\">Slide {index + 1}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        if (index > 0) moveSlide(index, index - 1)\n                      }}\n                      disabled={index === 0}\n                    >\n                      <Move className=\"h-3 w-3\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation()\n                        deleteSlide(index)\n                      }}\n                      disabled={slides.length <= 1}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Editor */}\n      <div className=\"lg:col-span-3 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-semibold text-foreground\">\n            Edit Slide {selectedSlide + 1}: {currentSlide?.title}\n          </h3>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => setIsPreview(!isPreview)} className=\"bg-transparent\">\n              <Eye className=\"h-4 w-4 mr-2\" />\n              {isPreview ? \"Edit\" : \"Preview\"}\n            </Button>\n            <Button onClick={onSave} className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n              <Save className=\"h-4 w-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </div>\n\n        {isPreview ? (\n          <Card className=\"bg-card border-border\">\n            <CardContent className=\"aspect-video p-12 flex flex-col justify-center\">\n              <div className=\"text-center space-y-4\">\n                <h2 className=\"text-3xl font-bold text-foreground\">{currentSlide?.content?.title}</h2>\n                <p className=\"text-lg text-muted-foreground\">{currentSlide?.content?.description}</p>\n                {currentSlide?.content?.features && (\n                  <div className=\"flex flex-wrap justify-center gap-2 mt-4\">\n                    {currentSlide.content.features.map((feature: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\">\n                        {feature}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <Tabs defaultValue=\"content\" className=\"space-y-4\">\n            <TabsList>\n              <TabsTrigger value=\"content\">Content</TabsTrigger>\n              <TabsTrigger value=\"design\">Design</TabsTrigger>\n              <TabsTrigger value=\"animation\">Animation</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"content\" className=\"space-y-4\">\n              <Card className=\"bg-card border-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-foreground\">Slide Content</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"slide-title\" className=\"text-foreground\">\n                      Slide Title\n                    </Label>\n                    <Input\n                      id=\"slide-title\"\n                      value={currentSlide?.title || \"\"}\n                      onChange={(e) => updateSlide(selectedSlide, { title: e.target.value })}\n                      className=\"bg-input border-border text-foreground\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"content-title\" className=\"text-foreground\">\n                      Content Title\n                    </Label>\n                    <Input\n                      id=\"content-title\"\n                      value={currentSlide?.content?.title || \"\"}\n                      onChange={(e) =>\n                        updateSlide(selectedSlide, {\n                          content: { ...currentSlide?.content, title: e.target.value },\n                        })\n                      }\n                      className=\"bg-input border-border text-foreground\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"content-description\" className=\"text-foreground\">\n                      Description\n                    </Label>\n                    <Textarea\n                      id=\"content-description\"\n                      value={currentSlide?.content?.description || \"\"}\n                      onChange={(e) =>\n                        updateSlide(selectedSlide, {\n                          content: { ...currentSlide?.content, description: e.target.value },\n                        })\n                      }\n                      className=\"bg-input border-border text-foreground min-h-[100px]\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"design\" className=\"space-y-4\">\n              <Card className=\"bg-card border-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-foreground\">Design Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-foreground\">Background</Label>\n                    <Select>\n                      <SelectTrigger className=\"bg-input border-border text-foreground\">\n                        <SelectValue placeholder=\"Select background\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"default\">Default</SelectItem>\n                        <SelectItem value=\"gradient\">Gradient</SelectItem>\n                        <SelectItem value=\"image\">Image</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-foreground\">Layout</Label>\n                    <Select>\n                      <SelectTrigger className=\"bg-input border-border text-foreground\">\n                        <SelectValue placeholder=\"Select layout\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"center\">Center</SelectItem>\n                        <SelectItem value=\"left\">Left Aligned</SelectItem>\n                        <SelectItem value=\"right\">Right Aligned</SelectItem>\n                        <SelectItem value=\"split\">Split Screen</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"animation\" className=\"space-y-4\">\n              <Card className=\"bg-card border-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-foreground\">Animation Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-foreground\">Entrance Animation</Label>\n                    <Select>\n                      <SelectTrigger className=\"bg-input border-border text-foreground\">\n                        <SelectValue placeholder=\"Select animation\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"none\">None</SelectItem>\n                        <SelectItem value=\"fade\">Fade In</SelectItem>\n                        <SelectItem value=\"slide\">Slide In</SelectItem>\n                        <SelectItem value=\"zoom\">Zoom In</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-foreground\">Transition Speed</Label>\n                    <Select>\n                      <SelectTrigger className=\"bg-input border-border text-foreground\">\n                        <SelectValue placeholder=\"Select speed\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"slow\">Slow</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"fast\">Fast</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        )}\n      </div>\n    </div>\n  )\n}\n","size_bytes":13010},"components/theme-provider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":292},"hooks/use-mobile.ts":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"hooks/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"public/env.js":{"content":"// Expose public Supabase env for static HTML usage\n// WARNING: These are safe to expose (anon key + URL)\nwindow.ENV = {\n  SUPABASE_URL: \"https://mdaoonokjpjiknirywvp.supabase.co\",\n  SUPABASE_ANON_KEY: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1kYW9vbm9ranBqaWtuaXJ5d3ZwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgzNjYwMzUsImV4cCI6MjA3Mzk0MjAzNX0.QGSUPcMowzpzjsqmNZVoggYDBFDsgLH-FyUufgWXmD0\",\n};\n","size_bytes":417},"styles/globals.css":{"content":"@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4337},"app/dashboard/layout.tsx":{"content":"import type React from \"react\"\nimport { DashboardLayout } from \"@/components/dashboard-layout\"\n\nexport default function Layout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <DashboardLayout>{children}</DashboardLayout>\n}\n","size_bytes":236},"app/dashboard/page.tsx":{"content":"import { redirect } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/server\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  Lightbulb,\n  Code,\n  FileText,\n  Users,\n  TrendingUp,\n  Shield,\n  Plus,\n  ArrowRight,\n  BarChart3,\n  CheckCircle,\n} from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default async function DashboardPage() {\n  const supabase = await createClient()\n\n  const { data, error } = await supabase.auth.getUser()\n  if (error || !data?.user) {\n    redirect(\"/auth/login\")\n  }\n\n  // Get user profile\n  const { data: profile } = await supabase.from(\"profiles\").select(\"*\").eq(\"id\", data.user.id).single()\n\n  // Get user's startup ideas count\n  const { count: ideasCount } = await supabase\n    .from(\"startup_ideas\")\n    .select(\"*\", { count: \"exact\", head: true })\n    .eq(\"user_id\", data.user.id)\n\n  // Get user's MVP projects count\n  const { count: projectsCount } = await supabase\n    .from(\"mvp_projects\")\n    .select(\"*\", { count: \"exact\", head: true })\n    .eq(\"user_id\", data.user.id)\n\n  // Get user's pitch decks count\n  const { count: decksCount } = await supabase\n    .from(\"pitch_decks\")\n    .select(\"*\", { count: \"exact\", head: true })\n    .eq(\"user_id\", data.user.id)\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Dashboard Header */}\n      <div className=\"border-b border-border bg-card/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">\n                Welcome back, {profile?.full_name || data.user.email}!\n              </h1>\n              <p className=\"text-muted-foreground mt-2\">Ready to build your next startup? Let's get started.</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Badge variant=\"secondary\" className=\"text-accent\">\n                Founder Plan\n              </Badge>\n              <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                New Project\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-card border-border\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Ideas Validated</CardTitle>\n              <Lightbulb className=\"h-4 w-4 text-accent\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">{ideasCount || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">+2 from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card border-border\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">MVPs Built</CardTitle>\n              <Code className=\"h-4 w-4 text-accent\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">{projectsCount || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">+1 from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card border-border\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Pitch Decks</CardTitle>\n              <FileText className=\"h-4 w-4 text-accent\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">{decksCount || 0}</div>\n              <p className=\"text-xs text-muted-foreground\">Ready for investors</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card border-border\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Success Score</CardTitle>\n              <BarChart3 className=\"h-4 w-4 text-accent\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\">85%</div>\n              <p className=\"text-xs text-muted-foreground\">Above average</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column - Tools & Features */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Quick Actions */}\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground\">Quick Actions</CardTitle>\n                <CardDescription className=\"text-muted-foreground\">\n                  Jump into building your startup with these essential tools\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"h-auto p-4 flex flex-col items-start space-y-2 bg-transparent border-border hover:border-accent/50\"\n                    asChild\n                  >\n                    <Link href=\"/dashboard/ideas\">\n                      <div className=\"flex items-center space-x-2 w-full\">\n                        <div className=\"w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center\">\n                          <Lightbulb className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <span className=\"font-medium text-foreground\">Validate New Idea</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground text-left\">\n                        Research market, analyze competitors, and validate demand\n                      </p>\n                    </Link>\n                  </Button>\n\n                  <Button\n                    variant=\"outline\"\n                    className=\"h-auto p-4 flex flex-col items-start space-y-2 bg-transparent border-border hover:border-accent/50\"\n                    asChild\n                  >\n                    <Link href=\"/dashboard/mvp\">\n                      <div className=\"flex items-center space-x-2 w-full\">\n                        <div className=\"w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center\">\n                          <Code className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <span className=\"font-medium text-foreground\">Build MVP</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground text-left\">\n                        Create functional prototypes with no-code tools\n                      </p>\n                    </Link>\n                  </Button>\n\n                  <Button\n                    variant=\"outline\"\n                    className=\"h-auto p-4 flex flex-col items-start space-y-2 bg-transparent border-border hover:border-accent/50\"\n                    asChild\n                  >\n                    <Link href=\"/dashboard/pitch\">\n                      <div className=\"flex items-center space-x-2 w-full\">\n                        <div className=\"w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center\">\n                          <FileText className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <span className=\"font-medium text-foreground\">Create Pitch Deck</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground text-left\">Generate investor-ready presentations</p>\n                    </Link>\n                  </Button>\n\n                  <Button\n                    variant=\"outline\"\n                    className=\"h-auto p-4 flex flex-col items-start space-y-2 bg-transparent border-border hover:border-accent/50\"\n                    asChild\n                  >\n                    <Link href=\"/dashboard/network\">\n                      <div className=\"flex items-center space-x-2 w-full\">\n                        <div className=\"w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center\">\n                          <Users className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <span className=\"font-medium text-foreground\">Find Co-founders</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground text-left\">\n                        Connect with potential partners and advisors\n                      </p>\n                    </Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Activity */}\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground\">Recent Activity</CardTitle>\n                <CardDescription className=\"text-muted-foreground\">\n                  Your latest progress and achievements\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-accent/10 rounded-full flex items-center justify-center\">\n                      <CheckCircle className=\"h-4 w-4 text-accent\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-foreground\">Welcome to FounderOS!</p>\n                      <p className=\"text-xs text-muted-foreground\">Account created successfully</p>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">Just now</div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3 opacity-50\">\n                    <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\">\n                      <Lightbulb className=\"h-4 w-4 text-muted-foreground\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">Validate your first idea</p>\n                      <p className=\"text-xs text-muted-foreground\">Get started with idea validation</p>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">Pending</div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3 opacity-50\">\n                    <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\">\n                      <Code className=\"h-4 w-4 text-muted-foreground\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">Build your first MVP</p>\n                      <p className=\"text-xs text-muted-foreground\">Create a functional prototype</p>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">Pending</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Progress & Tips */}\n          <div className=\"space-y-6\">\n            {/* Startup Journey Progress */}\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground\">Startup Journey</CardTitle>\n                <CardDescription className=\"text-muted-foreground\">\n                  Your progress through the startup building process\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-foreground\">Overall Progress</span>\n                    <span className=\"text-sm text-muted-foreground\">15%</span>\n                  </div>\n                  <Progress value={15} className=\"h-2\" />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 bg-accent rounded-full flex items-center justify-center\">\n                      <CheckCircle className=\"h-3 w-3 text-accent-foreground\" />\n                    </div>\n                    <span className=\"text-sm text-foreground\">Account Setup</span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 border-2 border-accent rounded-full flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-accent rounded-full\"></div>\n                    </div>\n                    <span className=\"text-sm text-foreground\">Idea Validation</span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 border-2 border-muted rounded-full\"></div>\n                    <span className=\"text-sm text-muted-foreground\">MVP Development</span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 border-2 border-muted rounded-full\"></div>\n                    <span className=\"text-sm text-muted-foreground\">Market Launch</span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-6 h-6 border-2 border-muted rounded-full\"></div>\n                    <span className=\"text-sm text-muted-foreground\">Fundraising</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AI Recommendations */}\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground\">AI Recommendations</CardTitle>\n                <CardDescription className=\"text-muted-foreground\">\n                  Personalized next steps for your startup journey\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-3 bg-accent/5 rounded-lg border border-accent/20\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-accent/10 rounded-full flex items-center justify-center mt-0.5\">\n                      <Lightbulb className=\"h-3 w-3 text-accent\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-foreground\">Start with idea validation</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Use our AI-powered validation engine to research your market and validate demand before\n                        building.\n                      </p>\n                      <Button size=\"sm\" variant=\"outline\" className=\"mt-2 h-7 text-xs bg-transparent\" asChild>\n                        <Link href=\"/dashboard/ideas\">\n                          Get Started <ArrowRight className=\"h-3 w-3 ml-1\" />\n                        </Link>\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-3 bg-muted/20 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-muted rounded-full flex items-center justify-center mt-0.5\">\n                      <Users className=\"h-3 w-3 text-muted-foreground\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">Complete your profile</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Add your skills and interests to get better co-founder matches.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Learning Resources */}\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground\">Learning Hub</CardTitle>\n                <CardDescription className=\"text-muted-foreground\">\n                  Essential resources for startup success\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/20 transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center\">\n                      <FileText className=\"h-4 w-4 text-accent\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">Startup Playbook</p>\n                      <p className=\"text-xs text-muted-foreground\">Complete guide to building startups</p>\n                    </div>\n                  </div>\n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n\n                <div className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/20 transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center\">\n                      <TrendingUp className=\"h-4 w-4 text-accent\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">Market Research Guide</p>\n                      <p className=\"text-xs text-muted-foreground\">How to validate your ideas</p>\n                    </div>\n                  </div>\n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n\n                <div className=\"flex items-center justify-between p-2 rounded-lg hover:bg-muted/20 transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center\">\n                      <Shield className=\"h-4 w-4 text-accent\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">Legal Essentials</p>\n                      <p className=\"text-xs text-muted-foreground\">Business formation and compliance</p>\n                    </div>\n                  </div>\n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":19737},"components/ui/accordion.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { ChevronDownIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Accordion({\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Root>) {\n  return <AccordionPrimitive.Root data-slot=\"accordion\" {...props} />\n}\n\nfunction AccordionItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Item>) {\n  return (\n    <AccordionPrimitive.Item\n      data-slot=\"accordion-item\"\n      className={cn('border-b last:border-b-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        data-slot=\"accordion-trigger\"\n        className={cn(\n          'focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <ChevronDownIcon className=\"text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200\" />\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  )\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof AccordionPrimitive.Content>) {\n  return (\n    <AccordionPrimitive.Content\n      data-slot=\"accordion-content\"\n      className=\"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm\"\n      {...props}\n    >\n      <div className={cn('pt-0 pb-4', className)}>{children}</div>\n    </AccordionPrimitive.Content>\n  )\n}\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2054},"components/ui/alert-dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'\n\nimport { cn } from '@/lib/utils'\nimport { buttonVariants } from '@/components/ui/button'\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn('text-lg font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: 'outline' }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3867},"components/ui/alert.tsx":{"content":"import * as React from 'react'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst alertVariants = cva(\n  'relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current',\n  {\n    variants: {\n      variant: {\n        default: 'bg-card text-card-foreground',\n        destructive:\n          'text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        'col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        'text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1617},"components/ui/aspect-ratio.tsx":{"content":"'use client'\n\nimport * as AspectRatioPrimitive from '@radix-ui/react-aspect-ratio'\n\nfunction AspectRatio({\n  ...props\n}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {\n  return <AspectRatioPrimitive.Root data-slot=\"aspect-ratio\" {...props} />\n}\n\nexport { AspectRatio }\n","size_bytes":280},"components/ui/avatar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from '@/lib/utils'\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        'relative flex size-8 shrink-0 overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square size-full', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'bg-muted flex size-full items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1099},"components/ui/badge.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span'\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1632},"components/ui/breadcrumb.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { ChevronRight, MoreHorizontal } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<'nav'>) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<'ol'>) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        'text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn('inline-flex items-center gap-1.5', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<'a'> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : 'a'\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn('hover:text-foreground transition-colors', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn('text-foreground font-normal', className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn('[&>svg]:size-3.5', className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn('flex size-9 items-center justify-center', className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2358},"components/ui/button.tsx":{"content":"import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n","size_bytes":2124},"components/ui/calendar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from 'lucide-react'\nimport { DayButton, DayPicker, getDefaultClassNames } from 'react-day-picker'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = 'label',\n  buttonVariant = 'ghost',\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>['variant']\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        'bg-background group/calendar p-3 [--cell-size:--spacing(8)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent',\n        String.raw`rtl:**:[.rdp-button\\_next>svg]:rotate-180`,\n        String.raw`rtl:**:[.rdp-button\\_previous>svg]:rotate-180`,\n        className,\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString('default', { month: 'short' }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn('w-fit', defaultClassNames.root),\n        months: cn(\n          'flex gap-4 flex-col md:flex-row relative',\n          defaultClassNames.months,\n        ),\n        month: cn('flex flex-col w-full gap-4', defaultClassNames.month),\n        nav: cn(\n          'flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between',\n          defaultClassNames.nav,\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_previous,\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          'size-(--cell-size) aria-disabled:opacity-50 p-0 select-none',\n          defaultClassNames.button_next,\n        ),\n        month_caption: cn(\n          'flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)',\n          defaultClassNames.month_caption,\n        ),\n        dropdowns: cn(\n          'w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5',\n          defaultClassNames.dropdowns,\n        ),\n        dropdown_root: cn(\n          'relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md',\n          defaultClassNames.dropdown_root,\n        ),\n        dropdown: cn(\n          'absolute bg-popover inset-0 opacity-0',\n          defaultClassNames.dropdown,\n        ),\n        caption_label: cn(\n          'select-none font-medium',\n          captionLayout === 'label'\n            ? 'text-sm'\n            : 'rounded-md pl-2 pr-1 flex items-center gap-1 text-sm h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5',\n          defaultClassNames.caption_label,\n        ),\n        table: 'w-full border-collapse',\n        weekdays: cn('flex', defaultClassNames.weekdays),\n        weekday: cn(\n          'text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem] select-none',\n          defaultClassNames.weekday,\n        ),\n        week: cn('flex w-full mt-2', defaultClassNames.week),\n        week_number_header: cn(\n          'select-none w-(--cell-size)',\n          defaultClassNames.week_number_header,\n        ),\n        week_number: cn(\n          'text-[0.8rem] select-none text-muted-foreground',\n          defaultClassNames.week_number,\n        ),\n        day: cn(\n          'relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square select-none',\n          defaultClassNames.day,\n        ),\n        range_start: cn(\n          'rounded-l-md bg-accent',\n          defaultClassNames.range_start,\n        ),\n        range_middle: cn('rounded-none', defaultClassNames.range_middle),\n        range_end: cn('rounded-r-md bg-accent', defaultClassNames.range_end),\n        today: cn(\n          'bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none',\n          defaultClassNames.today,\n        ),\n        outside: cn(\n          'text-muted-foreground aria-selected:text-muted-foreground',\n          defaultClassNames.outside,\n        ),\n        disabled: cn(\n          'text-muted-foreground opacity-50',\n          defaultClassNames.disabled,\n        ),\n        hidden: cn('invisible', defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === 'left') {\n            return (\n              <ChevronLeftIcon className={cn('size-4', className)} {...props} />\n            )\n          }\n\n          if (orientation === 'right') {\n            return (\n              <ChevronRightIcon\n                className={cn('size-4', className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn('size-4', className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-(--cell-size) items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        'data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 dark:hover:text-accent-foreground flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70',\n        defaultClassNames.day,\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n","size_bytes":7679},"components/ui/card.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn('px-6', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1992},"components/ui/carousel.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from 'embla-carousel-react'\nimport { ArrowLeft, ArrowRight } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: 'horizontal' | 'vertical'\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <Carousel />')\n  }\n\n  return context\n}\n\nfunction Carousel({\n  orientation = 'horizontal',\n  opts,\n  setApi,\n  plugins,\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & CarouselProps) {\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y',\n    },\n    plugins,\n  )\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api: CarouselApi) => {\n    if (!api) return\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'ArrowLeft') {\n        event.preventDefault()\n        scrollPrev()\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault()\n        scrollNext()\n      }\n    },\n    [scrollPrev, scrollNext],\n  )\n\n  React.useEffect(() => {\n    if (!api || !setApi) return\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) return\n    onSelect(api)\n    api.on('reInit', onSelect)\n    api.on('select', onSelect)\n\n    return () => {\n      api?.off('select', onSelect)\n    }\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}\n    >\n      <div\n        onKeyDownCapture={handleKeyDown}\n        className={cn('relative', className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        data-slot=\"carousel\"\n        {...props}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  )\n}\n\nfunction CarouselContent({ className, ...props }: React.ComponentProps<'div'>) {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div\n      ref={carouselRef}\n      className=\"overflow-hidden\"\n      data-slot=\"carousel-content\"\n    >\n      <div\n        className={cn(\n          'flex',\n          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CarouselItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      data-slot=\"carousel-item\"\n      className={cn(\n        'min-w-0 shrink-0 grow-0 basis-full',\n        orientation === 'horizontal' ? 'pl-4' : 'pt-4',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CarouselPrevious({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-previous\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -left-12 -translate-y-1/2'\n          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n}\n\nfunction CarouselNext({\n  className,\n  variant = 'outline',\n  size = 'icon',\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      data-slot=\"carousel-next\"\n      variant={variant}\n      size={size}\n      className={cn(\n        'absolute size-8 rounded-full',\n        orientation === 'horizontal'\n          ? 'top-1/2 -right-12 -translate-y-1/2'\n          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n        className,\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n}\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":5562},"components/ui/chart.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as RechartsPrimitive from 'recharts'\n\nimport { cn } from '@/lib/utils'\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: '', dark: '.dark' } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error('useChart must be used within a <ChartContainer />')\n  }\n\n  return context\n}\n\nfunction ChartContainer({\n  id,\n  className,\n  children,\n  config,\n  ...props\n}: React.ComponentProps<'div'> & {\n  config: ChartConfig\n  children: React.ComponentProps<\n    typeof RechartsPrimitive.ResponsiveContainer\n  >['children']\n}) {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-slot=\"chart\"\n        data-chart={chartId}\n        className={cn(\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\n          className,\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n}\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color,\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join('\\n')}\n}\n`,\n          )\n          .join('\\n'),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nfunction ChartTooltipContent({\n  active,\n  payload,\n  className,\n  indicator = 'dot',\n  hideLabel = false,\n  hideIndicator = false,\n  label,\n  labelFormatter,\n  labelClassName,\n  formatter,\n  color,\n  nameKey,\n  labelKey,\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n  React.ComponentProps<'div'> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: 'line' | 'dot' | 'dashed'\n    nameKey?: string\n    labelKey?: string\n  }) {\n  const { config } = useChart()\n\n  const tooltipLabel = React.useMemo(() => {\n    if (hideLabel || !payload?.length) {\n      return null\n    }\n\n    const [item] = payload\n    const key = `${labelKey || item?.dataKey || item?.name || 'value'}`\n    const itemConfig = getPayloadConfigFromPayload(config, item, key)\n    const value =\n      !labelKey && typeof label === 'string'\n        ? config[label as keyof typeof config]?.label || label\n        : itemConfig?.label\n\n    if (labelFormatter) {\n      return (\n        <div className={cn('font-medium', labelClassName)}>\n          {labelFormatter(value, payload)}\n        </div>\n      )\n    }\n\n    if (!value) {\n      return null\n    }\n\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>\n  }, [\n    label,\n    labelFormatter,\n    payload,\n    hideLabel,\n    labelClassName,\n    config,\n    labelKey,\n  ])\n\n  if (!active || !payload?.length) {\n    return null\n  }\n\n  const nestLabel = payload.length === 1 && indicator !== 'dot'\n\n  return (\n    <div\n      className={cn(\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\n        className,\n      )}\n    >\n      {!nestLabel ? tooltipLabel : null}\n      <div className=\"grid gap-1.5\">\n        {payload.map((item, index) => {\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n          const indicatorColor = color || item.payload.fill || item.color\n\n          return (\n            <div\n              key={item.dataKey}\n              className={cn(\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\n                indicator === 'dot' && 'items-center',\n              )}\n            >\n              {formatter && item?.value !== undefined && item.name ? (\n                formatter(item.value, item.name, item, index, item.payload)\n              ) : (\n                <>\n                  {itemConfig?.icon ? (\n                    <itemConfig.icon />\n                  ) : (\n                    !hideIndicator && (\n                      <div\n                        className={cn(\n                          'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',\n                          {\n                            'h-2.5 w-2.5': indicator === 'dot',\n                            'w-1': indicator === 'line',\n                            'w-0 border-[1.5px] border-dashed bg-transparent':\n                              indicator === 'dashed',\n                            'my-0.5': nestLabel && indicator === 'dashed',\n                          },\n                        )}\n                        style={\n                          {\n                            '--color-bg': indicatorColor,\n                            '--color-border': indicatorColor,\n                          } as React.CSSProperties\n                        }\n                      />\n                    )\n                  )}\n                  <div\n                    className={cn(\n                      'flex flex-1 justify-between leading-none',\n                      nestLabel ? 'items-end' : 'items-center',\n                    )}\n                  >\n                    <div className=\"grid gap-1.5\">\n                      {nestLabel ? tooltipLabel : null}\n                      <span className=\"text-muted-foreground\">\n                        {itemConfig?.label || item.name}\n                      </span>\n                    </div>\n                    {item.value && (\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\n                        {item.value.toLocaleString()}\n                      </span>\n                    )}\n                  </div>\n                </>\n              )}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nfunction ChartLegendContent({\n  className,\n  hideIcon = false,\n  payload,\n  verticalAlign = 'bottom',\n  nameKey,\n}: React.ComponentProps<'div'> &\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\n    hideIcon?: boolean\n    nameKey?: string\n  }) {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-center gap-4',\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\n        className,\n      )}\n    >\n      {payload.map((item) => {\n        const key = `${nameKey || item.dataKey || 'value'}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div\n            key={item.value}\n            className={\n              '[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3'\n            }\n          >\n            {itemConfig?.icon && !hideIcon ? (\n              <itemConfig.icon />\n            ) : (\n              <div\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                style={{\n                  backgroundColor: item.color,\n                }}\n              />\n            )}\n            {itemConfig?.label}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string,\n) {\n  if (typeof payload !== 'object' || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    'payload' in payload &&\n    typeof payload.payload === 'object' &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === 'string'\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":9786},"components/ui/checkbox.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\nimport { CheckIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        'peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n","size_bytes":1227},"components/ui/collapsible.tsx":{"content":"'use client'\n\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible'\n\nfunction Collapsible({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {\n  return <CollapsiblePrimitive.Root data-slot=\"collapsible\" {...props} />\n}\n\nfunction CollapsibleTrigger({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleTrigger\n      data-slot=\"collapsible-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction CollapsibleContent({\n  ...props\n}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {\n  return (\n    <CollapsiblePrimitive.CollapsibleContent\n      data-slot=\"collapsible-content\"\n      {...props}\n    />\n  )\n}\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":800},"components/ui/command.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Command as CommandPrimitive } from 'cmdk'\nimport { SearchIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\n\nfunction Command({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive>) {\n  return (\n    <CommandPrimitive\n      data-slot=\"command\"\n      className={cn(\n        'bg-popover text-popover-foreground flex h-full w-full flex-col overflow-hidden rounded-md',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandDialog({\n  title = 'Command Palette',\n  description = 'Search for a command to run...',\n  children,\n  className,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof Dialog> & {\n  title?: string\n  description?: string\n  className?: string\n  showCloseButton?: boolean\n}) {\n  return (\n    <Dialog {...props}>\n      <DialogHeader className=\"sr-only\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogDescription>{description}</DialogDescription>\n      </DialogHeader>\n      <DialogContent\n        className={cn('overflow-hidden p-0', className)}\n        showCloseButton={showCloseButton}\n      >\n        <Command className=\"[&_[cmdk-group-heading]]:text-muted-foreground **:data-[slot=command-input-wrapper]:h-12 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group]]:px-2 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nfunction CommandInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Input>) {\n  return (\n    <div\n      data-slot=\"command-input-wrapper\"\n      className=\"flex h-9 items-center gap-2 border-b px-3\"\n    >\n      <SearchIcon className=\"size-4 shrink-0 opacity-50\" />\n      <CommandPrimitive.Input\n        data-slot=\"command-input\"\n        className={cn(\n          'placeholder:text-muted-foreground flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-hidden disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction CommandList({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.List>) {\n  return (\n    <CommandPrimitive.List\n      data-slot=\"command-list\"\n      className={cn(\n        'max-h-[300px] scroll-py-1 overflow-x-hidden overflow-y-auto',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandEmpty({\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Empty>) {\n  return (\n    <CommandPrimitive.Empty\n      data-slot=\"command-empty\"\n      className=\"py-6 text-center text-sm\"\n      {...props}\n    />\n  )\n}\n\nfunction CommandGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Group>) {\n  return (\n    <CommandPrimitive.Group\n      data-slot=\"command-group\"\n      className={cn(\n        'text-foreground [&_[cmdk-group-heading]]:text-muted-foreground overflow-hidden p-1 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Separator>) {\n  return (\n    <CommandPrimitive.Separator\n      data-slot=\"command-separator\"\n      className={cn('bg-border -mx-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CommandItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof CommandPrimitive.Item>) {\n  return (\n    <CommandPrimitive.Item\n      data-slot=\"command-item\"\n      className={cn(\n        \"data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CommandShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"command-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4824},"components/ui/context-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ContextMenuPrimitive from '@radix-ui/react-context-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction ContextMenu({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {\n  return <ContextMenuPrimitive.Root data-slot=\"context-menu\" {...props} />\n}\n\nfunction ContextMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {\n  return (\n    <ContextMenuPrimitive.Trigger data-slot=\"context-menu-trigger\" {...props} />\n  )\n}\n\nfunction ContextMenuGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {\n  return (\n    <ContextMenuPrimitive.Group data-slot=\"context-menu-group\" {...props} />\n  )\n}\n\nfunction ContextMenuPortal({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {\n  return (\n    <ContextMenuPrimitive.Portal data-slot=\"context-menu-portal\" {...props} />\n  )\n}\n\nfunction ContextMenuSub({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {\n  return <ContextMenuPrimitive.Sub data-slot=\"context-menu-sub\" {...props} />\n}\n\nfunction ContextMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {\n  return (\n    <ContextMenuPrimitive.RadioGroup\n      data-slot=\"context-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.SubTrigger\n      data-slot=\"context-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto\" />\n    </ContextMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction ContextMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {\n  return (\n    <ContextMenuPrimitive.SubContent\n      data-slot=\"context-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {\n  return (\n    <ContextMenuPrimitive.Portal>\n      <ContextMenuPrimitive.Content\n        data-slot=\"context-menu-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </ContextMenuPrimitive.Portal>\n  )\n}\n\nfunction ContextMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <ContextMenuPrimitive.Item\n      data-slot=\"context-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {\n  return (\n    <ContextMenuPrimitive.CheckboxItem\n      data-slot=\"context-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction ContextMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {\n  return (\n    <ContextMenuPrimitive.RadioItem\n      data-slot=\"context-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <ContextMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </ContextMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </ContextMenuPrimitive.RadioItem>\n  )\n}\n\nfunction ContextMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <ContextMenuPrimitive.Label\n      data-slot=\"context-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {\n  return (\n    <ContextMenuPrimitive.Separator\n      data-slot=\"context-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction ContextMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"context-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":8230},"components/ui/dialog.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DialogPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3985},"components/ui/drawer.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Drawer as DrawerPrimitive } from 'vaul'\n\nimport { cn } from '@/lib/utils'\n\nfunction Drawer({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) {\n  return <DrawerPrimitive.Root data-slot=\"drawer\" {...props} />\n}\n\nfunction DrawerTrigger({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />\n}\n\nfunction DrawerPortal({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />\n}\n\nfunction DrawerClose({\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Close>) {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />\n}\n\nfunction DrawerOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerContent({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Content>) {\n  return (\n    <DrawerPortal data-slot=\"drawer-portal\">\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        className={cn(\n          'group/drawer-content bg-background fixed z-50 flex h-auto flex-col',\n          'data-[vaul-drawer-direction=top]:inset-x-0 data-[vaul-drawer-direction=top]:top-0 data-[vaul-drawer-direction=top]:mb-24 data-[vaul-drawer-direction=top]:max-h-[80vh] data-[vaul-drawer-direction=top]:rounded-b-lg data-[vaul-drawer-direction=top]:border-b',\n          'data-[vaul-drawer-direction=bottom]:inset-x-0 data-[vaul-drawer-direction=bottom]:bottom-0 data-[vaul-drawer-direction=bottom]:mt-24 data-[vaul-drawer-direction=bottom]:max-h-[80vh] data-[vaul-drawer-direction=bottom]:rounded-t-lg data-[vaul-drawer-direction=bottom]:border-t',\n          'data-[vaul-drawer-direction=right]:inset-y-0 data-[vaul-drawer-direction=right]:right-0 data-[vaul-drawer-direction=right]:w-3/4 data-[vaul-drawer-direction=right]:border-l data-[vaul-drawer-direction=right]:sm:max-w-sm',\n          'data-[vaul-drawer-direction=left]:inset-y-0 data-[vaul-drawer-direction=left]:left-0 data-[vaul-drawer-direction=left]:w-3/4 data-[vaul-drawer-direction=left]:border-r data-[vaul-drawer-direction=left]:sm:max-w-sm',\n          className,\n        )}\n        {...props}\n      >\n        <div className=\"bg-muted mx-auto mt-4 hidden h-2 w-[100px] shrink-0 rounded-full group-data-[vaul-drawer-direction=bottom]/drawer-content:block\" />\n        {children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  )\n}\n\nfunction DrawerHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      className={cn(\n        'flex flex-col gap-0.5 p-4 group-data-[vaul-drawer-direction=bottom]/drawer-content:text-center group-data-[vaul-drawer-direction=top]/drawer-content:text-center md:gap-1.5 md:text-left',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Title>) {\n  return (\n    <DrawerPrimitive.Title\n      data-slot=\"drawer-title\"\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DrawerDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Description>) {\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":4258},"components/ui/dropdown-menu.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n","size_bytes":8292},"components/ui/form.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\nimport { Slot } from '@radix-ui/react-slot'\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from 'react-hook-form'\n\nimport { cn } from '@/lib/utils'\nimport { Label } from '@/components/ui/label'\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error('useFormField should be used within <FormField>')\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn('grid gap-2', className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn('data-[error=true]:text-destructive', className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? '') : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn('text-destructive text-sm', className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3761},"components/ui/hover-card.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as HoverCardPrimitive from '@radix-ui/react-hover-card'\n\nimport { cn } from '@/lib/utils'\n\nfunction HoverCard({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Root>) {\n  return <HoverCardPrimitive.Root data-slot=\"hover-card\" {...props} />\n}\n\nfunction HoverCardTrigger({\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {\n  return (\n    <HoverCardPrimitive.Trigger data-slot=\"hover-card-trigger\" {...props} />\n  )\n}\n\nfunction HoverCardContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {\n  return (\n    <HoverCardPrimitive.Portal data-slot=\"hover-card-portal\">\n      <HoverCardPrimitive.Content\n        data-slot=\"hover-card-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-64 origin-(--radix-hover-card-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </HoverCardPrimitive.Portal>\n  )\n}\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1533},"components/ui/input-otp.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { OTPInput, OTPInputContext } from 'input-otp'\nimport { MinusIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        'flex items-center gap-2 has-disabled:opacity-50',\n        containerClassName,\n      )}\n      className={cn('disabled:cursor-not-allowed', className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn('flex items-center', className)}\n      {...props}\n    />\n  )\n}\n\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<'div'> & {\n  index: number\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {}\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        'data-[active=true]:border-ring data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:ring-destructive/20 dark:data-[active=true]:aria-invalid:ring-destructive/40 aria-invalid:border-destructive data-[active=true]:aria-invalid:border-destructive dark:bg-input/30 border-input relative flex h-9 w-9 items-center justify-center border-y border-r text-sm shadow-xs transition-all outline-none first:rounded-l-md first:border-l last:rounded-r-md data-[active=true]:z-10 data-[active=true]:ring-[3px]',\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"animate-caret-blink bg-foreground h-4 w-px duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  )\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2256},"components/ui/input.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":968},"components/ui/label.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\n\nimport { cn } from '@/lib/utils'\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n","size_bytes":612},"components/ui/menubar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as MenubarPrimitive from '@radix-ui/react-menubar'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Menubar({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Root>) {\n  return (\n    <MenubarPrimitive.Root\n      data-slot=\"menubar\"\n      className={cn(\n        'bg-background flex h-9 items-center gap-1 rounded-md border p-1 shadow-xs',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu data-slot=\"menubar-menu\" {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group data-slot=\"menubar-group\" {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal data-slot=\"menubar-portal\" {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return (\n    <MenubarPrimitive.RadioGroup data-slot=\"menubar-radio-group\" {...props} />\n  )\n}\n\nfunction MenubarTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {\n  return (\n    <MenubarPrimitive.Trigger\n      data-slot=\"menubar-trigger\"\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex items-center rounded-sm px-2 py-1 text-sm font-medium outline-hidden select-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarContent({\n  className,\n  align = 'start',\n  alignOffset = -4,\n  sideOffset = 8,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Content>) {\n  return (\n    <MenubarPortal>\n      <MenubarPrimitive.Content\n        data-slot=\"menubar-content\"\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[12rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </MenubarPortal>\n  )\n}\n\nfunction MenubarItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <MenubarPrimitive.Item\n      data-slot=\"menubar-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {\n  return (\n    <MenubarPrimitive.CheckboxItem\n      data-slot=\"menubar-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.CheckboxItem>\n  )\n}\n\nfunction MenubarRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {\n  return (\n    <MenubarPrimitive.RadioItem\n      data-slot=\"menubar-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-xs py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <MenubarPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </MenubarPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </MenubarPrimitive.RadioItem>\n  )\n}\n\nfunction MenubarLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.Label\n      data-slot=\"menubar-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {\n  return (\n    <MenubarPrimitive.Separator\n      data-slot=\"menubar-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"menubar-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nfunction MenubarSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <MenubarPrimitive.SubTrigger\n      data-slot=\"menubar-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        'focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-none select-none data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto h-4 w-4\" />\n    </MenubarPrimitive.SubTrigger>\n  )\n}\n\nfunction MenubarSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {\n  return (\n    <MenubarPrimitive.SubContent\n      data-slot=\"menubar-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-menubar-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Menubar,\n  MenubarPortal,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarGroup,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarItem,\n  MenubarShortcut,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarSub,\n  MenubarSubTrigger,\n  MenubarSubContent,\n}\n","size_bytes":8404},"components/ui/navigation-menu.tsx":{"content":"import * as React from 'react'\nimport * as NavigationMenuPrimitive from '@radix-ui/react-navigation-menu'\nimport { cva } from 'class-variance-authority'\nimport { ChevronDownIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {\n  viewport?: boolean\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        'group/navigation-menu relative flex max-w-max flex-1 items-center justify-center',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  )\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\n        'group flex flex-1 list-none items-center justify-center gap-1',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn('relative', className)}\n      {...props}\n    />\n  )\n}\n\nconst navigationMenuTriggerStyle = cva(\n  'group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1',\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), 'group', className)}\n      {...props}\n    >\n      {children}{' '}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\"\n      />\n    </NavigationMenuPrimitive.Trigger>\n  )\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        'data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto',\n        'group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {\n  return (\n    <div\n      className={'absolute top-full left-0 isolate z-50 flex justify-center'}\n    >\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          'origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]',\n          className,\n        )}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        'data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden',\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  )\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n","size_bytes":6651},"components/ui/pagination.tsx":{"content":"import * as React from 'react'\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  MoreHorizontalIcon,\n} from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\nimport { Button, buttonVariants } from '@/components/ui/button'\n\nfunction Pagination({ className, ...props }: React.ComponentProps<'nav'>) {\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      data-slot=\"pagination\"\n      className={cn('mx-auto flex w-full justify-center', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationContent({\n  className,\n  ...props\n}: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"pagination-content\"\n      className={cn('flex flex-row items-center gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationItem({ ...props }: React.ComponentProps<'li'>) {\n  return <li data-slot=\"pagination-item\" {...props} />\n}\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<React.ComponentProps<typeof Button>, 'size'> &\n  React.ComponentProps<'a'>\n\nfunction PaginationLink({\n  className,\n  isActive,\n  size = 'icon',\n  ...props\n}: PaginationLinkProps) {\n  return (\n    <a\n      aria-current={isActive ? 'page' : undefined}\n      data-slot=\"pagination-link\"\n      data-active={isActive}\n      className={cn(\n        buttonVariants({\n          variant: isActive ? 'outline' : 'ghost',\n          size,\n        }),\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction PaginationPrevious({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to previous page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pl-2.5', className)}\n      {...props}\n    >\n      <ChevronLeftIcon />\n      <span className=\"hidden sm:block\">Previous</span>\n    </PaginationLink>\n  )\n}\n\nfunction PaginationNext({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) {\n  return (\n    <PaginationLink\n      aria-label=\"Go to next page\"\n      size=\"default\"\n      className={cn('gap-1 px-2.5 sm:pr-2.5', className)}\n      {...props}\n    >\n      <span className=\"hidden sm:block\">Next</span>\n      <ChevronRightIcon />\n    </PaginationLink>\n  )\n}\n\nfunction PaginationEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      aria-hidden\n      data-slot=\"pagination-ellipsis\"\n      className={cn('flex size-9 items-center justify-center', className)}\n      {...props}\n    >\n      <MoreHorizontalIcon className=\"size-4\" />\n      <span className=\"sr-only\">More pages</span>\n    </span>\n  )\n}\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2713},"components/ui/popover.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as PopoverPrimitive from '@radix-ui/react-popover'\n\nimport { cn } from '@/lib/utils'\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = 'center',\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden',\n          className,\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1636},"components/ui/progress.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ProgressPrimitive from '@radix-ui/react-progress'\n\nimport { cn } from '@/lib/utils'\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        'bg-primary/20 relative h-2 w-full overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n","size_bytes":741},"components/ui/radio-group.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group'\nimport { CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn('grid gap-3', className)}\n      {...props}\n    />\n  )\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        'border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n}\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"components/ui/resizable.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { GripVerticalIcon } from 'lucide-react'\nimport * as ResizablePrimitive from 'react-resizable-panels'\n\nimport { cn } from '@/lib/utils'\n\nfunction ResizablePanelGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {\n  return (\n    <ResizablePrimitive.PanelGroup\n      data-slot=\"resizable-panel-group\"\n      className={cn(\n        'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction ResizablePanel({\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {\n  return <ResizablePrimitive.Panel data-slot=\"resizable-panel\" {...props} />\n}\n\nfunction ResizableHandle({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) {\n  return (\n    <ResizablePrimitive.PanelResizeHandle\n      data-slot=\"resizable-handle\"\n      className={cn(\n        'bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:translate-x-0 data-[panel-group-direction=vertical]:after:-translate-y-1/2 [&[data-panel-group-direction=vertical]>div]:rotate-90',\n        className,\n      )}\n      {...props}\n    >\n      {withHandle && (\n        <div className=\"bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border\">\n          <GripVerticalIcon className=\"size-2.5\" />\n        </div>\n      )}\n    </ResizablePrimitive.PanelResizeHandle>\n  )\n}\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":2030},"components/ui/scroll-area.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\n\nimport { cn } from '@/lib/utils'\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn('relative', className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        'flex touch-none p-px transition-colors select-none',\n        orientation === 'vertical' &&\n          'h-full w-2.5 border-l border-l-transparent',\n        orientation === 'horizontal' &&\n          'h-2.5 flex-col border-t border-t-transparent',\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1646},"components/ui/select.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = 'default',\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: 'sm' | 'default'\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n","size_bytes":6259},"components/ui/separator.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SeparatorPrimitive from '@radix-ui/react-separator'\n\nimport { cn } from '@/lib/utils'\n\nfunction Separator({\n  className,\n  orientation = 'horizontal',\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":700},"components/ui/sheet.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SheetPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = 'right',\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: 'top' | 'right' | 'bottom' | 'left'\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500',\n          side === 'right' &&\n            'data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',\n          side === 'left' &&\n            'data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',\n          side === 'top' &&\n            'data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b',\n          side === 'bottom' &&\n            'data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn('flex flex-col gap-1.5 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn('mt-auto flex flex-col gap-2 p-4', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn('text-foreground font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4092},"components/ui/sidebar.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, VariantProps } from 'class-variance-authority'\nimport { PanelLeftIcon } from 'lucide-react'\n\nimport { useIsMobile } from '@/hooks/use-mobile'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Separator } from '@/components/ui/separator'\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from '@/components/ui/sheet'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip'\n\nconst SIDEBAR_COOKIE_NAME = 'sidebar_state'\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = '16rem'\nconst SIDEBAR_WIDTH_MOBILE = '18rem'\nconst SIDEBAR_WIDTH_ICON = '3rem'\nconst SIDEBAR_KEYBOARD_SHORTCUT = 'b'\n\ntype SidebarContextProps = {\n  state: 'expanded' | 'collapsed'\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error('useSidebar must be used within a SidebarProvider.')\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === 'function' ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open],\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? 'expanded' : 'collapsed'\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              '--sidebar-width': SIDEBAR_WIDTH,\n              '--sidebar-width-icon': SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',\n            className,\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = 'left',\n  variant = 'sidebar',\n  collapsible = 'offcanvas',\n  className,\n  children,\n  ...props\n}: React.ComponentProps<'div'> & {\n  side?: 'left' | 'right'\n  variant?: 'sidebar' | 'floating' | 'inset'\n  collapsible?: 'offcanvas' | 'icon' | 'none'\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === 'none') {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              '--sidebar-width': SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === 'collapsed' ? collapsible : ''}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear',\n          'group-data-[collapsible=offcanvas]:w-0',\n          'group-data-[side=right]:rotate-180',\n          variant === 'floating' || variant === 'inset'\n            ? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'\n            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)',\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',\n          side === 'left'\n            ? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'\n            : 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',\n          // Adjust the padding for floating and inset variants.\n          variant === 'floating' || variant === 'inset'\n            ? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'\n            : 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn('size-7', className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<'button'>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',\n        'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',\n        '[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',\n        'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',\n        '[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',\n        '[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<'main'>) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        'bg-background relative flex w-full flex-1 flex-col',\n        'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn('bg-background h-8 w-full shadow-none', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn('flex flex-col gap-2 p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn('flex flex-col gap-2 p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn('bg-sidebar-border mx-2 w-auto', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn('relative flex w-full min-w-0 flex-col p-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'div'> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'div'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 md:after:hidden',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn('w-full text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn('flex w-full min-w-0 flex-col gap-1', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn('group/menu-item relative', className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n  {\n    variants: {\n      variant: {\n        default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',\n        outline:\n          'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',\n      },\n      size: {\n        default: 'h-8 text-sm',\n        sm: 'h-7 text-xs',\n        lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = 'default',\n  size = 'default',\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<'button'> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : 'button'\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === 'string') {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== 'collapsed' || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<'button'> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',\n        // Increases the hit area of the button on mobile.\n        'after:absolute after:-inset-2 md:after:hidden',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        showOnHover &&\n          'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',\n        'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',\n        'peer-data-[size=sm]/menu-button:top-1',\n        'peer-data-[size=default]/menu-button:top-1.5',\n        'peer-data-[size=lg]/menu-button:top-2.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<'div'> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            '--skeleton-width': width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<'ul'>) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<'li'>) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn('group/menu-sub-item relative', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = 'md',\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<'a'> & {\n  asChild?: boolean\n  size?: 'sm' | 'md'\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : 'a'\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',\n        'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',\n        size === 'sm' && 'text-xs',\n        size === 'md' && 'text-sm',\n        'group-data-[collapsible=icon]:hidden',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21649},"components/ui/skeleton.tsx":{"content":"import { cn } from '@/lib/utils'\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn('bg-accent animate-pulse rounded-md', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"components/ui/slider.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SliderPrimitive from '@radix-ui/react-slider'\n\nimport { cn } from '@/lib/utils'\n\nfunction Slider({\n  className,\n  defaultValue,\n  value,\n  min = 0,\n  max = 100,\n  ...props\n}: React.ComponentProps<typeof SliderPrimitive.Root>) {\n  const _values = React.useMemo(\n    () =>\n      Array.isArray(value)\n        ? value\n        : Array.isArray(defaultValue)\n          ? defaultValue\n          : [min, max],\n    [value, defaultValue, min, max],\n  )\n\n  return (\n    <SliderPrimitive.Root\n      data-slot=\"slider\"\n      defaultValue={defaultValue}\n      value={value}\n      min={min}\n      max={max}\n      className={cn(\n        'relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col',\n        className,\n      )}\n      {...props}\n    >\n      <SliderPrimitive.Track\n        data-slot=\"slider-track\"\n        className={\n          'bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5'\n        }\n      >\n        <SliderPrimitive.Range\n          data-slot=\"slider-range\"\n          className={\n            'bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full'\n          }\n        />\n      </SliderPrimitive.Track>\n      {Array.from({ length: _values.length }, (_, index) => (\n        <SliderPrimitive.Thumb\n          data-slot=\"slider-thumb\"\n          key={index}\n          className=\"border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50\"\n        />\n      ))}\n    </SliderPrimitive.Root>\n  )\n}\n\nexport { Slider }\n","size_bytes":1995},"components/ui/sonner.tsx":{"content":"'use client'\n\nimport { useTheme } from 'next-themes'\nimport { Toaster as Sonner, ToasterProps } from 'sonner'\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = 'system' } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps['theme']}\n      className=\"toaster group\"\n      style={\n        {\n          '--normal-bg': 'var(--popover)',\n          '--normal-text': 'var(--popover-foreground)',\n          '--normal-border': 'var(--border)',\n        } as React.CSSProperties\n      }\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":564},"components/ui/switch.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as SwitchPrimitive from '@radix-ui/react-switch'\n\nimport { cn } from '@/lib/utils'\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={\n          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0'\n        }\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n","size_bytes":1174},"components/ui/table.tsx":{"content":"'use client'\n\nimport * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Table({ className, ...props }: React.ComponentProps<'table'>) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn('w-full caption-bottom text-sm', className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<'thead'>) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn('[&_tr]:border-b', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<'tbody'>) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn('[&_tr:last-child]:border-0', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<'tfoot'>) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        'bg-muted/50 border-t font-medium [&>tr]:last:border-b-0',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<'tr'>) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        'hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<'th'>) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        'text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<'td'>) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        'p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<'caption'>) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn('text-muted-foreground mt-4 text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2452},"components/ui/tabs.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TabsPrimitive from '@radix-ui/react-tabs'\n\nimport { cn } from '@/lib/utils'\n\nfunction Tabs({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  )\n}\n\nfunction TabsList({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  return (\n    <TabsPrimitive.List\n      data-slot=\"tabs-list\"\n      className={cn(\n        'bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TabsContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn('flex-1 outline-none', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1971},"components/ui/textarea.tsx":{"content":"import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n","size_bytes":760},"components/ui/toast.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToastPrimitives from '@radix-ui/react-toast'\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport { X } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n      className,\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        default: 'border bg-background text-foreground',\n        destructive:\n          'destructive group border-destructive bg-destructive text-destructive-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',\n      className,\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn('text-sm font-semibold', className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn('text-sm opacity-90', className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4863},"components/ui/toaster.tsx":{"content":"'use client'\n\nimport { useToast } from '@/hooks/use-toast'\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from '@/components/ui/toast'\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"components/ui/toggle-group.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as ToggleGroupPrimitive from '@radix-ui/react-toggle-group'\nimport { type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\nimport { toggleVariants } from '@/components/ui/toggle'\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: 'default',\n  variant: 'default',\n})\n\nfunction ToggleGroup({\n  className,\n  variant,\n  size,\n  children,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <ToggleGroupPrimitive.Root\n      data-slot=\"toggle-group\"\n      data-variant={variant}\n      data-size={size}\n      className={cn(\n        'group/toggle-group flex w-fit items-center rounded-md data-[variant=outline]:shadow-xs',\n        className,\n      )}\n      {...props}\n    >\n      <ToggleGroupContext.Provider value={{ variant, size }}>\n        {children}\n      </ToggleGroupContext.Provider>\n    </ToggleGroupPrimitive.Root>\n  )\n}\n\nfunction ToggleGroupItem({\n  className,\n  children,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &\n  VariantProps<typeof toggleVariants>) {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      data-slot=\"toggle-group-item\"\n      data-variant={context.variant || variant}\n      data-size={context.size || size}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        'min-w-0 flex-1 shrink-0 rounded-none shadow-none first:rounded-l-md last:rounded-r-md focus:z-10 focus-visible:z-10 data-[variant=outline]:border-l-0 data-[variant=outline]:first:border-l',\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n}\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1927},"components/ui/toggle.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TogglePrimitive from '@radix-ui/react-toggle'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-transparent',\n        outline:\n          'border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground',\n      },\n      size: {\n        default: 'h-9 px-2 min-w-9',\n        sm: 'h-8 px-1.5 min-w-8',\n        lg: 'h-10 px-2.5 min-w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}: React.ComponentProps<typeof TogglePrimitive.Root> &\n  VariantProps<typeof toggleVariants>) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Toggle, toggleVariants }\n","size_bytes":1571},"components/ui/tooltip.tsx":{"content":"'use client'\n\nimport * as React from 'react'\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\n\nimport { cn } from '@/lib/utils'\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1892},"components/ui/use-mobile.tsx":{"content":"import * as React from 'react'\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener('change', onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener('change', onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"components/ui/use-toast.ts":{"content":"'use client'\n\n// Inspired by react-hot-toast library\nimport * as React from 'react'\n\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast'\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: 'ADD_TOAST',\n  UPDATE_TOAST: 'UPDATE_TOAST',\n  DISMISS_TOAST: 'DISMISS_TOAST',\n  REMOVE_TOAST: 'REMOVE_TOAST',\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType['ADD_TOAST']\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType['UPDATE_TOAST']\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType['DISMISS_TOAST']\n      toastId?: ToasterToast['id']\n    }\n  | {\n      type: ActionType['REMOVE_TOAST']\n      toastId?: ToasterToast['id']\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: 'REMOVE_TOAST',\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'ADD_TOAST':\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case 'UPDATE_TOAST':\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      }\n\n    case 'DISMISS_TOAST': {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      }\n    }\n    case 'REMOVE_TOAST':\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, 'id'>\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: 'UPDATE_TOAST',\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })\n\n  dispatch({\n    type: 'ADD_TOAST',\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3945},"lib/supabase/admin.ts":{"content":"import { createClient } from \"@supabase/supabase-js\"\n\n/**\n * Admin client for server-side operations that require elevated privileges\n * Uses service role key for database mutations, user management, etc.\n */\nexport function createAdminClient() {\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\n  \n  if (!url || !serviceRoleKey) {\n    throw new Error('Supabase admin credentials not configured. Please set NEXT_PUBLIC_SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY environment variables.')\n  }\n  \n  return createClient(url, serviceRoleKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  })\n}","size_bytes":687},"lib/supabase/client.ts":{"content":"import { createBrowserClient } from \"@supabase/ssr\"\n\nexport function createClient() {\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  \n  if (!url || !anonKey) {\n    throw new Error('Supabase credentials not configured. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables.')\n  }\n  \n  return createBrowserClient(url, anonKey)\n}\n","size_bytes":431},"lib/supabase/middleware.ts":{"content":"import { createServerClient } from \"@supabase/ssr\"\nimport { NextResponse, type NextRequest } from \"next/server\"\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  // With Fluid compute, don't put this client in a global environment\n  // variable. Always create a new one on each request.\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) => supabaseResponse.cookies.set(name, value, options))\n        },\n      },\n    },\n  )\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: If you remove getUser() and you use server-side rendering\n  // with the Supabase client, your users may be randomly logged out.\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (\n    request.nextUrl.pathname !== \"/\" &&\n    !user &&\n    !request.nextUrl.pathname.startsWith(\"/auth\") &&\n    request.nextUrl.pathname.startsWith(\"/dashboard\")\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = \"/auth/login\"\n    return NextResponse.redirect(url)\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  return supabaseResponse\n}\n","size_bytes":1795},"lib/supabase/server.ts":{"content":"import { createServerClient } from \"@supabase/ssr\"\nimport { cookies } from \"next/headers\"\n\n/**\n * Especially important if using Fluid compute: Don't put this client in a\n * global variable. Always create a new client within each function when using\n * it.\n */\nexport async function createClient() {\n  const cookieStore = await cookies()\n  \n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  \n  if (!url || !anonKey) {\n    throw new Error('Supabase credentials not configured. Please set NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables.')\n  }\n\n  return createServerClient(url, anonKey, {\n    cookies: {\n      getAll() {\n        return cookieStore.getAll()\n      },\n      setAll(cookiesToSet) {\n        try {\n          cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options))\n        } catch {\n          // The \"setAll\" method was called from a Server Component.\n          // This can be ignored if you have middleware refreshing\n          // user sessions.\n        }\n      },\n    },\n  })\n}\n","size_bytes":1117},"app/api/generate-mvp/route.ts":{"content":"import { createClient } from \"@/lib/supabase/server\"\nimport { createAdminClient } from \"@/lib/supabase/admin\"\nimport { type NextRequest, NextResponse } from \"next/server\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = await createClient()\n\n    // Check authentication\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { name, description, features, tech_stack, custom_requirements, idea_id } = body\n\n    // Simulate MVP generation process\n    // In a real implementation, this would:\n    // 1. Generate wireframes using AI\n    // 2. Create code templates based on tech stack\n    // 3. Set up project structure\n    // 4. Generate documentation\n\n    const wireframes = generateWireframes(features)\n    const generatedCode = generateCodeStructure(tech_stack, features)\n\n    // Save to database using admin client\n    const adminClient = createAdminClient()\n    const { data, error } = await adminClient\n      .from(\"mvp_projects\")\n      .insert({\n        user_id: user.id,\n        idea_id: idea_id || null,\n        name,\n        description,\n        tech_stack,\n        features,\n        wireframes,\n        generated_code: generatedCode,\n        status: \"completed\",\n      })\n      .select()\n      .single()\n\n    if (error) {\n      console.error(\"Database error:\", error)\n      return NextResponse.json({ error: \"Failed to save MVP project\" }, { status: 500 })\n    }\n\n    return NextResponse.json({\n      success: true,\n      project: data,\n    })\n  } catch (error) {\n    console.error(\"API error:\", error)\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\n  }\n}\n\n// Helper functions to generate mock MVP components\nfunction generateWireframes(features: string[]) {\n  const wireframes = [\n    { name: \"Landing Page\", url: \"/landing-page-wireframe.jpg\" },\n    { name: \"Dashboard\", url: \"/dashboard-wireframe.png\" },\n  ]\n\n  if (features.includes(\"User Profiles\")) {\n    wireframes.push({ name: \"User Profile\", url: \"/user-profile-wireframe.jpg\" })\n  }\n\n  if (features.includes(\"Admin Panel\")) {\n    wireframes.push({ name: \"Admin Panel\", url: \"/admin-panel-wireframe.jpg\" })\n  }\n\n  return wireframes\n}\n\nfunction generateCodeStructure(techStack: string[], features: string[]) {\n  let code = `// Generated MVP Structure\\n// Technology Stack: ${techStack.join(\", \")}\\n\\n`\n\n  if (techStack.includes(\"nextjs\")) {\n    code += `// Next.js App Structure\napp/\n  layout.tsx\n  page.tsx\n  globals.css\n`\n  }\n\n  if (techStack.includes(\"react-native\")) {\n    code += `// React Native App Structure\nsrc/\n  components/\n  screens/\n  navigation/\n  services/\n`\n  }\n\n  code += `\\n// Features implemented:\\n`\n  features.forEach((feature) => {\n    code += `// - ${feature}\\n`\n  })\n\n  code += `\\n// Main App Component\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <Router>\n        <Routes>\n          <Route path=\"/\" component={LandingPage} />\n`\n\n  if (features.includes(\"Dashboard\")) {\n    code += `          <Route path=\"/dashboard\" component={Dashboard} />\\n`\n  }\n\n  if (features.includes(\"User Profiles\")) {\n    code += `          <Route path=\"/profile\" component={UserProfile} />\\n`\n  }\n\n  code += `        </Routes>\n      </Router>\n      <Footer />\n    </div>\n  );\n}`\n\n  return code\n}\n\n\n","size_bytes":3467},"app/api/generate-pitch-deck/route.ts":{"content":"import { createClient } from \"@/lib/supabase/server\"\nimport { createAdminClient } from \"@/lib/supabase/admin\"\nimport { type NextRequest, NextResponse } from \"next/server\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = await createClient()\n\n    // Check authentication\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const {\n      title,\n      description,\n      pitch_type,\n      funding_goal,\n      business_model,\n      target_market,\n      team_info,\n      traction_metrics,\n      competitive_advantage,\n      idea_id,\n      mvp_id,\n    } = body\n\n    // Generate slides based on input data\n    const slides = generatePitchSlides({\n      title,\n      description,\n      pitch_type,\n      funding_goal,\n      business_model,\n      target_market,\n      team_info,\n      traction_metrics,\n      competitive_advantage,\n    })\n\n    // Save to database using admin client\n    const adminClient = createAdminClient()\n    const { data, error } = await adminClient\n      .from(\"pitch_decks\")\n      .insert({\n        user_id: user.id,\n        idea_id: idea_id || null,\n        mvp_id: mvp_id || null,\n        title,\n        description,\n        pitch_type,\n        slides,\n        status: \"completed\",\n      })\n      .select()\n      .single()\n\n    if (error) {\n      console.error(\"Database error:\", error)\n      return NextResponse.json({ error: \"Failed to save pitch deck\" }, { status: 500 })\n    }\n\n    return NextResponse.json({\n      success: true,\n      pitch_deck: data,\n    })\n  } catch (error) {\n    console.error(\"API error:\", error)\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\n  }\n}\n\n// Helper function to generate pitch deck slides\nfunction generatePitchSlides(data: any) {\n  return [\n    {\n      title: \"Title Slide\",\n      content: {\n        title: data.title,\n        subtitle: data.description,\n        presenter: \"Founder & CEO\",\n        date: new Date().toLocaleDateString(),\n      },\n    },\n    {\n      title: \"Problem\",\n      content: {\n        title: \"The Problem We're Solving\",\n        description: \"Market problem that creates significant pain points for our target audience\",\n        pain_points: [\n          \"Current solutions are inadequate\",\n          \"Market gap creates inefficiencies\",\n          \"Users struggle with existing options\",\n        ],\n        market_validation: \"85% of target market experiences this issue daily\",\n      },\n    },\n    {\n      title: \"Solution\",\n      content: {\n        title: \"Our Solution\",\n        description: data.description,\n        key_benefits: [\"Solves core problem efficiently\", \"User-friendly and accessible\", \"Scalable and sustainable\"],\n        competitive_advantage: data.competitive_advantage,\n      },\n    },\n    {\n      title: \"Market Opportunity\",\n      content: {\n        title: \"Market Opportunity\",\n        tam: \"$10B Total Addressable Market\",\n        sam: \"$2.5B Serviceable Addressable Market\",\n        som: \"$250M Serviceable Obtainable Market\",\n        target_market: data.target_market,\n        growth_rate: \"15% CAGR over next 5 years\",\n      },\n    },\n    {\n      title: \"Business Model\",\n      content: {\n        title: \"How We Make Money\",\n        description: data.business_model,\n        revenue_streams: [\"Primary subscription model\", \"Premium feature upgrades\", \"Enterprise partnerships\"],\n        pricing_strategy: \"Freemium model with premium tiers\",\n      },\n    },\n    {\n      title: \"Traction\",\n      content: {\n        title: \"Traction & Key Metrics\",\n        description: data.traction_metrics,\n        key_metrics: [\"User growth rate\", \"Revenue milestones\", \"Market validation\"],\n        achievements: [\"Product-market fit achieved\", \"Key partnerships secured\", \"Awards and recognition\"],\n      },\n    },\n    {\n      title: \"Competition\",\n      content: {\n        title: \"Competitive Landscape\",\n        description: \"Analysis of current market players and our positioning\",\n        competitors: [\"Direct competitor A\", \"Direct competitor B\", \"Indirect competitor C\"],\n        differentiation: data.competitive_advantage,\n      },\n    },\n    {\n      title: \"Team\",\n      content: {\n        title: \"Our Team\",\n        description: data.team_info,\n        key_roles: [\"CEO - Vision and strategy\", \"CTO - Technical leadership\", \"CMO - Growth and marketing\"],\n        advisors: [\"Industry expert advisor\", \"Technical advisor\", \"Business development advisor\"],\n      },\n    },\n    {\n      title: \"Financial Projections\",\n      content: {\n        title: \"Financial Projections\",\n        description: \"5-year revenue and growth projections\",\n        projections: {\n          year1: \"$100K ARR\",\n          year2: \"$500K ARR\",\n          year3: \"$2M ARR\",\n          year4: \"$5M ARR\",\n          year5: \"$10M ARR\",\n        },\n        key_assumptions: [\"Customer acquisition cost\", \"Lifetime value\", \"Market penetration rate\"],\n      },\n    },\n    {\n      title: \"Funding Request\",\n      content: {\n        title: \"Investment Opportunity\",\n        funding_goal: data.funding_goal,\n        use_of_funds: [\n          \"Product development - 40%\",\n          \"Marketing and sales - 30%\",\n          \"Team expansion - 20%\",\n          \"Operations - 10%\",\n        ],\n        milestones: [\"Achieve product-market fit\", \"Scale to 10K users\", \"Expand to new markets\"],\n        timeline: \"18-month runway to next milestone\",\n      },\n    },\n    {\n      title: \"Thank You\",\n      content: {\n        title: \"Thank You\",\n        subtitle: \"Questions & Discussion\",\n        contact: {\n          email: \"founder@company.com\",\n          website: \"www.company.com\",\n          linkedin: \"linkedin.com/company/startup\",\n        },\n        next_steps: \"Let's discuss how we can work together\",\n      },\n    },\n  ]\n}\n","size_bytes":5950},"app/api/validate-idea/route.ts":{"content":"import { createClient } from \"@/lib/supabase/server\"\nimport { createAdminClient } from \"@/lib/supabase/admin\"\nimport { type NextRequest, NextResponse } from \"next/server\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = await createClient()\n\n    // Check authentication\n    const {\n      data: { user },\n      error: authError,\n    } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { title, description, problem_statement, solution_approach, target_market } = body\n\n    // Simulate AI validation process\n    // In a real implementation, this would call external APIs for market research\n    const validationScore = Math.floor(Math.random() * 40) + 60 // 60-100 range\n\n    const validationData = {\n      market_size: generateMarketSize(),\n      competition_level: generateCompetitionLevel(),\n      demand_indicators: generateDemandIndicators(),\n      risk_factors: generateRiskFactors(),\n      opportunities: generateOpportunities(),\n      recommendations: generateRecommendations(validationScore),\n    }\n\n    // Save to database using admin client\n    const adminClient = createAdminClient()\n    const { data, error } = await adminClient\n      .from(\"startup_ideas\")\n      .insert({\n        user_id: user.id,\n        title,\n        description,\n        problem_statement,\n        solution_approach,\n        target_market,\n        validation_score: validationScore,\n        validation_data: validationData,\n        status: validationScore >= 70 ? \"validated\" : \"validating\",\n      })\n      .select()\n      .single()\n\n    if (error) {\n      console.error(\"Database error:\", error)\n      return NextResponse.json({ error: \"Failed to save idea\" }, { status: 500 })\n    }\n\n    return NextResponse.json({\n      success: true,\n      idea: data,\n      validation_score: validationScore,\n      validation_data: validationData,\n    })\n  } catch (error) {\n    console.error(\"API error:\", error)\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\n  }\n}\n\n// Helper functions to generate mock validation data\nfunction generateMarketSize() {\n  const sizes = [\"$500M\", \"$1.2B\", \"$2.5B\", \"$5.8B\", \"$12B\"]\n  return sizes[Math.floor(Math.random() * sizes.length)]\n}\n\nfunction generateCompetitionLevel() {\n  const levels = [\"Low\", \"Medium\", \"High\"]\n  return levels[Math.floor(Math.random() * levels.length)]\n}\n\nfunction generateDemandIndicators() {\n  const indicators = [\n    \"Growing search trends\",\n    \"Active communities discussing the problem\",\n    \"Existing solutions with significant gaps\",\n    \"Increasing market adoption\",\n    \"Positive social media sentiment\",\n    \"Industry reports showing growth\",\n  ]\n  return indicators.slice(0, Math.floor(Math.random() * 3) + 2)\n}\n\nfunction generateRiskFactors() {\n  const risks = [\n    \"Market saturation\",\n    \"High customer acquisition cost\",\n    \"Regulatory challenges\",\n    \"Technology barriers\",\n    \"Strong incumbent players\",\n    \"Long sales cycles\",\n  ]\n  return risks.slice(0, Math.floor(Math.random() * 2) + 1)\n}\n\nfunction generateOpportunities() {\n  const opportunities = [\n    \"Underserved niche market\",\n    \"Technology advancement enabling new solutions\",\n    \"Changing user behavior patterns\",\n    \"Regulatory changes creating opportunities\",\n    \"Economic trends favoring the solution\",\n    \"Partnership opportunities\",\n  ]\n  return opportunities.slice(0, Math.floor(Math.random() * 3) + 2)\n}\n\nfunction generateRecommendations(score: number) {\n  const baseRecs = [\n    \"Focus on a specific user segment initially\",\n    \"Validate with potential customers through interviews\",\n    \"Consider MVP features carefully to test core assumptions\",\n  ]\n\n  if (score >= 80) {\n    baseRecs.push(\"Strong validation - proceed with MVP development\")\n  } else if (score >= 60) {\n    baseRecs.push(\"Good potential - gather more customer feedback before building\")\n  } else {\n    baseRecs.push(\"Consider pivoting or refining the core value proposition\")\n  }\n\n  return baseRecs\n}\n","size_bytes":4114},"app/auth/error/page.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport Link from \"next/link\"\nimport { AlertCircle } from \"lucide-react\"\n\nexport default async function AuthErrorPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ error: string }>\n}) {\n  const params = await searchParams\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 bg-background\">\n      <div className=\"w-full max-w-sm\">\n        <div className=\"flex flex-col gap-6\">\n          <div className=\"text-center\">\n            <Link href=\"/\" className=\"flex items-center justify-center space-x-2 mb-6\">\n              <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                <span className=\"text-accent-foreground font-bold text-sm\">F</span>\n              </div>\n              <span className=\"text-xl font-semibold text-foreground\">FounderOS</span>\n            </Link>\n          </div>\n          <Card className=\"bg-card border-border\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-destructive/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <AlertCircle className=\"h-8 w-8 text-destructive\" />\n              </div>\n              <CardTitle className=\"text-2xl text-foreground\">Authentication Error</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center\">\n              {params?.error ? (\n                <p className=\"text-sm text-muted-foreground mb-6\">Error: {params.error}</p>\n              ) : (\n                <p className=\"text-sm text-muted-foreground mb-6\">\n                  An authentication error occurred. Please try again.\n                </p>\n              )}\n              <div className=\"flex flex-col gap-2\">\n                <Button asChild className=\"w-full\">\n                  <Link href=\"/auth/login\">Try Again</Link>\n                </Button>\n                <Button asChild variant=\"outline\" className=\"w-full bg-transparent\">\n                  <Link href=\"/\">Back to Home</Link>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":2252},"app/auth/login/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport Link from \"next/link\"\nimport { useRouter } from \"next/navigation\"\nimport { useState } from \"react\"\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const supabase = createClient()\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n      if (error) throw error\n      router.push(\"/dashboard\")\n    } catch (error: unknown) {\n      if (error instanceof Error && error.message.includes('Supabase credentials not configured')) {\n        setError(\"Authentication service is not configured. Please contact support.\")\n      } else {\n        setError(error instanceof Error ? error.message : \"An error occurred\")\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 bg-background\">\n      <div className=\"w-full max-w-sm\">\n        <div className=\"flex flex-col gap-6\">\n          <div className=\"text-center\">\n            <Link href=\"/\" className=\"flex items-center justify-center space-x-2 mb-6\">\n              <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                <span className=\"text-accent-foreground font-bold text-sm\">F</span>\n              </div>\n              <span className=\"text-xl font-semibold text-foreground\">FounderOS</span>\n            </Link>\n          </div>\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl text-foreground\">Sign In</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                Enter your email below to sign in to your account\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleLogin}>\n                <div className=\"flex flex-col gap-6\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"email\" className=\"text-foreground\">\n                      Email\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"m@example.com\"\n                      required\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      className=\"bg-input border-border text-foreground\"\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"password\" className=\"text-foreground\">\n                      Password\n                    </Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      required\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      className=\"bg-input border-border text-foreground\"\n                    />\n                  </div>\n                  {error && <p className=\"text-sm text-destructive\">{error}</p>}\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? \"Signing in...\" : \"Sign In\"}\n                  </Button>\n                </div>\n                <div className=\"mt-4 text-center text-sm\">\n                  Don&apos;t have an account?{\" \"}\n                  <Link href=\"/auth/sign-up\" className=\"text-accent hover:text-accent/80 underline underline-offset-4\">\n                    Sign up\n                  </Link>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":4469},"app/auth/sign-up/page.tsx":{"content":"\"use client\"\n\nimport type React from \"react\"\n\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport Link from \"next/link\"\nimport { useRouter } from \"next/navigation\"\nimport { useState } from \"react\"\n\nexport default function SignUpPage() {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [fullName, setFullName] = useState(\"\")\n  const [repeatPassword, setRepeatPassword] = useState(\"\")\n  const [error, setError] = useState<string | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const router = useRouter()\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n    setError(null)\n\n    if (password !== repeatPassword) {\n      setError(\"Passwords do not match\")\n      setIsLoading(false)\n      return\n    }\n\n    try {\n      const supabase = createClient()\n      const { error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: process.env.NEXT_PUBLIC_DEV_SUPABASE_REDIRECT_URL || `${window.location.origin}/dashboard`,\n          data: {\n            full_name: fullName,\n          },\n        },\n      })\n      if (error) throw error\n      router.push(\"/auth/sign-up-success\")\n    } catch (error: unknown) {\n      if (error instanceof Error && error.message.includes('Supabase credentials not configured')) {\n        setError(\"Authentication service is not configured. Please contact support.\")\n      } else {\n        setError(error instanceof Error ? error.message : \"An error occurred\")\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 bg-background\">\n      <div className=\"w-full max-w-sm\">\n        <div className=\"flex flex-col gap-6\">\n          <div className=\"text-center\">\n            <Link href=\"/\" className=\"flex items-center justify-center space-x-2 mb-6\">\n              <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                <span className=\"text-accent-foreground font-bold text-sm\">F</span>\n              </div>\n              <span className=\"text-xl font-semibold text-foreground\">FounderOS</span>\n            </Link>\n          </div>\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl text-foreground\">Create Account</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                Enter your information to create your FounderOS account\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSignUp}>\n                <div className=\"flex flex-col gap-6\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"fullName\" className=\"text-foreground\">\n                      Full Name\n                    </Label>\n                    <Input\n                      id=\"fullName\"\n                      type=\"text\"\n                      placeholder=\"John Doe\"\n                      required\n                      value={fullName}\n                      onChange={(e) => setFullName(e.target.value)}\n                      className=\"bg-input border-border text-foreground\"\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"email\" className=\"text-foreground\">\n                      Email\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"m@example.com\"\n                      required\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      className=\"bg-input border-border text-foreground\"\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"password\" className=\"text-foreground\">\n                      Password\n                    </Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      required\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      className=\"bg-input border-border text-foreground\"\n                    />\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"repeat-password\" className=\"text-foreground\">\n                      Confirm Password\n                    </Label>\n                    <Input\n                      id=\"repeat-password\"\n                      type=\"password\"\n                      required\n                      value={repeatPassword}\n                      onChange={(e) => setRepeatPassword(e.target.value)}\n                      className=\"bg-input border-border text-foreground\"\n                    />\n                  </div>\n                  {error && <p className=\"text-sm text-destructive\">{error}</p>}\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? \"Creating account...\" : \"Create Account\"}\n                  </Button>\n                </div>\n                <div className=\"mt-4 text-center text-sm\">\n                  Already have an account?{\" \"}\n                  <Link href=\"/auth/login\" className=\"text-accent hover:text-accent/80 underline underline-offset-4\">\n                    Sign in\n                  </Link>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":6097},"app/auth/sign-up-success/page.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport Link from \"next/link\"\nimport { CheckCircle } from \"lucide-react\"\n\nexport default function SignUpSuccessPage() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-6 bg-background\">\n      <div className=\"w-full max-w-sm\">\n        <div className=\"flex flex-col gap-6\">\n          <div className=\"text-center\">\n            <Link href=\"/\" className=\"flex items-center justify-center space-x-2 mb-6\">\n              <div className=\"w-8 h-8 bg-accent rounded-lg flex items-center justify-center\">\n                <span className=\"text-accent-foreground font-bold text-sm\">F</span>\n              </div>\n              <span className=\"text-xl font-semibold text-foreground\">FounderOS</span>\n            </Link>\n          </div>\n          <Card className=\"bg-card border-border\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle className=\"h-8 w-8 text-accent\" />\n              </div>\n              <CardTitle className=\"text-2xl text-foreground\">Check your email!</CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                We&apos;ve sent you a confirmation link\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground mb-6\">\n                Please check your email and click the confirmation link to activate your FounderOS account. Once\n                confirmed, you&apos;ll be able to access your dashboard and start building your startup.\n              </p>\n              <Button asChild variant=\"outline\" className=\"w-full bg-transparent\">\n                <Link href=\"/auth/login\">Back to Sign In</Link>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":2083},"app/dashboard/ideas/page.tsx":{"content":"import { redirect } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/server\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Plus, Lightbulb, TrendingUp, Users, DollarSign, Clock, ArrowRight } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default async function IdeasPage() {\n  const supabase = await createClient()\n\n  const { data, error } = await supabase.auth.getUser()\n  if (error || !data?.user) {\n    redirect(\"/auth/login\")\n  }\n\n  // Get user's startup ideas\n  const { data: ideas } = await supabase\n    .from(\"startup_ideas\")\n    .select(\"*\")\n    .eq(\"user_id\", data.user.id)\n    .order(\"created_at\", { ascending: false })\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"validated\":\n        return \"bg-green-500/10 text-green-500 border-green-500/20\"\n      case \"validating\":\n        return \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\"\n      case \"rejected\":\n        return \"bg-red-500/10 text-red-500 border-red-500/20\"\n      default:\n        return \"bg-muted text-muted-foreground border-border\"\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"validated\":\n        return \"Validated\"\n      case \"validating\":\n        return \"Validating\"\n      case \"rejected\":\n        return \"Needs Work\"\n      default:\n        return \"Draft\"\n    }\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Idea Validation</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Validate your startup ideas with AI-powered market research and analysis\n          </p>\n        </div>\n        <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n          <Link href=\"/dashboard/ideas/new\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Idea\n          </Link>\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Lightbulb className=\"h-4 w-4 text-accent\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Total Ideas</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">{ideas?.length || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Validated</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">\n              {ideas?.filter((idea) => idea.status === \"validated\").length || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-4 w-4 text-yellow-500\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">In Progress</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">\n              {ideas?.filter((idea) => idea.status === \"validating\").length || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-4 w-4 text-accent\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Avg. Score</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">\n              {ideas?.length\n                ? Math.round(ideas.reduce((acc, idea) => acc + (idea.validation_score || 0), 0) / ideas.length)\n                : 0}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Ideas List */}\n      <div className=\"space-y-4\">\n        {ideas && ideas.length > 0 ? (\n          ideas.map((idea) => (\n            <Card key={idea.id} className=\"bg-card border-border hover:border-accent/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"text-lg font-semibold text-foreground\">{idea.title}</h3>\n                      <Badge className={getStatusColor(idea.status)}>{getStatusText(idea.status)}</Badge>\n                      {idea.validation_score > 0 && (\n                        <Badge variant=\"outline\" className=\"text-accent border-accent/20\">\n                          Score: {idea.validation_score}/100\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-muted-foreground mb-4 line-clamp-2\">{idea.description}</p>\n\n                    {idea.target_market && (\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-4\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Users className=\"h-3 w-3\" />\n                          <span>Target: {idea.target_market}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          <span>Created: {new Date(idea.created_at).toLocaleDateString()}</span>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <Link href={`/dashboard/ideas/${idea.id}`}>View Details</Link>\n                    </Button>\n                    {idea.status === \"validated\" && (\n                      <Button size=\"sm\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                        <Link href={`/dashboard/mvp/new?ideaId=${idea.id}`}>\n                          Build MVP <ArrowRight className=\"h-3 w-3 ml-1\" />\n                        </Link>\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card className=\"bg-card border-border\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Lightbulb className=\"h-8 w-8 text-accent\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No ideas yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Start your entrepreneurial journey by validating your first startup idea\n              </p>\n              <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                <Link href=\"/dashboard/ideas/new\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Validate Your First Idea\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  )\n}\n","size_bytes":7833},"app/dashboard/mvp/page.tsx":{"content":"import { redirect } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/server\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Plus, Code, Globe, Smartphone, Database, Clock, ArrowRight, ExternalLink } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default async function MVPPage() {\n  const supabase = await createClient()\n\n  const { data, error } = await supabase.auth.getUser()\n  if (error || !data?.user) {\n    redirect(\"/auth/login\")\n  }\n\n  // Get user's MVP projects\n  const { data: projects } = await supabase\n    .from(\"mvp_projects\")\n    .select(\"*\")\n    .eq(\"user_id\", data.user.id)\n    .order(\"created_at\", { ascending: false })\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-500/10 text-green-500 border-green-500/20\"\n      case \"generating\":\n        return \"bg-blue-500/10 text-blue-500 border-blue-500/20\"\n      case \"deployed\":\n        return \"bg-purple-500/10 text-purple-500 border-purple-500/20\"\n      default:\n        return \"bg-muted text-muted-foreground border-border\"\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"Ready\"\n      case \"generating\":\n        return \"Building\"\n      case \"deployed\":\n        return \"Live\"\n      default:\n        return \"Planning\"\n    }\n  }\n\n  const getProjectTypeIcon = (techStack: any) => {\n    const stack = Array.isArray(techStack) ? techStack : []\n    if (stack.includes(\"React Native\") || stack.includes(\"Flutter\")) {\n      return <Smartphone className=\"h-4 w-4 text-accent\" />\n    } else if (stack.includes(\"Next.js\") || stack.includes(\"React\")) {\n      return <Globe className=\"h-4 w-4 text-accent\" />\n    } else if (stack.includes(\"API\") || stack.includes(\"Backend\")) {\n      return <Database className=\"h-4 w-4 text-accent\" />\n    }\n    return <Code className=\"h-4 w-4 text-accent\" />\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">MVP Builder</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Build functional prototypes and MVPs with AI-powered no-code tools\n          </p>\n        </div>\n        <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n          <Link href=\"/dashboard/mvp/new\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New MVP\n          </Link>\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Code className=\"h-4 w-4 text-accent\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Total MVPs</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">{projects?.length || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Globe className=\"h-4 w-4 text-green-500\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Deployed</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">\n              {projects?.filter((project) => project.status === \"deployed\").length || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-4 w-4 text-blue-500\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">In Progress</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">\n              {projects?.filter((project) => project.status === \"generating\").length || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Database className=\"h-4 w-4 text-accent\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Avg. Build Time</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">2.5h</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Projects List */}\n      <div className=\"space-y-4\">\n        {projects && projects.length > 0 ? (\n          projects.map((project) => (\n            <Card key={project.id} className=\"bg-card border-border hover:border-accent/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      {getProjectTypeIcon(project.tech_stack)}\n                      <h3 className=\"text-lg font-semibold text-foreground\">{project.name}</h3>\n                      <Badge className={getStatusColor(project.status)}>{getStatusText(project.status)}</Badge>\n                    </div>\n                    <p className=\"text-muted-foreground mb-4 line-clamp-2\">{project.description}</p>\n\n                    <div className=\"flex items-center space-x-6 text-sm text-muted-foreground mb-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Code className=\"h-3 w-3\" />\n                        <span>\n                          Tech: {Array.isArray(project.tech_stack) ? project.tech_stack.join(\", \") : \"Not specified\"}\n                        </span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Clock className=\"h-3 w-3\" />\n                        <span>Created: {new Date(project.created_at).toLocaleDateString()}</span>\n                      </div>\n                    </div>\n\n                    {project.features && Array.isArray(project.features) && project.features.length > 0 && (\n                      <div className=\"flex flex-wrap gap-2 mb-4\">\n                        {project.features.slice(0, 3).map((feature: string, index: number) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            {feature}\n                          </Badge>\n                        ))}\n                        {project.features.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{project.features.length - 3} more\n                          </Badge>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <Link href={`/dashboard/mvp/${project.id}`}>View Details</Link>\n                    </Button>\n                    {project.deployment_url && (\n                      <Button size=\"sm\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                        <Link href={project.deployment_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <ExternalLink className=\"h-3 w-3 mr-1\" />\n                          View Live\n                        </Link>\n                      </Button>\n                    )}\n                    {project.status === \"completed\" && !project.deployment_url && (\n                      <Button size=\"sm\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                        <Link href={`/dashboard/mvp/${project.id}/deploy`}>\n                          Deploy <ArrowRight className=\"h-3 w-3 ml-1\" />\n                        </Link>\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card className=\"bg-card border-border\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Code className=\"h-8 w-8 text-accent\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No MVPs yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Transform your validated ideas into functional prototypes with our AI-powered MVP builder\n              </p>\n              <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                <Link href=\"/dashboard/mvp/new\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Build Your First MVP\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  )\n}\n","size_bytes":9329},"app/dashboard/pitch/page.tsx":{"content":"import { redirect } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/server\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Plus, FileText, Eye, Share, Clock, ArrowRight, ExternalLink } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default async function PitchPage() {\n  const supabase = await createClient()\n\n  const { data, error } = await supabase.auth.getUser()\n  if (error || !data?.user) {\n    redirect(\"/auth/login\")\n  }\n\n  // Get user's pitch decks\n  const { data: pitchDecks } = await supabase\n    .from(\"pitch_decks\")\n    .select(\"*\")\n    .eq(\"user_id\", data.user.id)\n    .order(\"created_at\", { ascending: false })\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-500/10 text-green-500 border-green-500/20\"\n      case \"generating\":\n        return \"bg-blue-500/10 text-blue-500 border-blue-500/20\"\n      case \"shared\":\n        return \"bg-purple-500/10 text-purple-500 border-purple-500/20\"\n      default:\n        return \"bg-muted text-muted-foreground border-border\"\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"Ready\"\n      case \"generating\":\n        return \"Building\"\n      case \"shared\":\n        return \"Shared\"\n      default:\n        return \"Draft\"\n    }\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Pitch Deck Builder</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Create investor-ready presentations with AI-powered content generation\n          </p>\n        </div>\n        <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n          <Link href=\"/dashboard/pitch/new\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Pitch Deck\n          </Link>\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <FileText className=\"h-4 w-4 text-accent\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Total Decks</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">{pitchDecks?.length || 0}</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Eye className=\"h-4 w-4 text-green-500\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Completed</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">\n              {pitchDecks?.filter((deck) => deck.status === \"completed\").length || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Share className=\"h-4 w-4 text-purple-500\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Shared</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">\n              {pitchDecks?.filter((deck) => deck.status === \"shared\").length || 0}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card border-border\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-4 w-4 text-accent\" />\n              <span className=\"text-sm font-medium text-muted-foreground\">Avg. Views</span>\n            </div>\n            <div className=\"text-2xl font-bold text-foreground mt-2\">24</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Pitch Decks List */}\n      <div className=\"space-y-4\">\n        {pitchDecks && pitchDecks.length > 0 ? (\n          pitchDecks.map((deck) => (\n            <Card key={deck.id} className=\"bg-card border-border hover:border-accent/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <FileText className=\"h-5 w-5 text-accent\" />\n                      <h3 className=\"text-lg font-semibold text-foreground\">{deck.title}</h3>\n                      <Badge className={getStatusColor(deck.status)}>{getStatusText(deck.status)}</Badge>\n                    </div>\n                    <p className=\"text-muted-foreground mb-4 line-clamp-2\">{deck.description}</p>\n\n                    <div className=\"flex items-center space-x-6 text-sm text-muted-foreground mb-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <FileText className=\"h-3 w-3\" />\n                        <span>Slides: {Array.isArray(deck.slides) ? deck.slides.length : 0}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Clock className=\"h-3 w-3\" />\n                        <span>Created: {new Date(deck.created_at).toLocaleDateString()}</span>\n                      </div>\n                      {deck.presentation_url && (\n                        <div className=\"flex items-center space-x-1\">\n                          <Eye className=\"h-3 w-3\" />\n                          <span>Views: {Math.floor(Math.random() * 50) + 10}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <Link href={`/dashboard/pitch/${deck.id}`}>View Details</Link>\n                    </Button>\n                    {deck.presentation_url && (\n                      <Button size=\"sm\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                        <Link href={deck.presentation_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <ExternalLink className=\"h-3 w-3 mr-1\" />\n                          Present\n                        </Link>\n                      </Button>\n                    )}\n                    {deck.status === \"completed\" && !deck.presentation_url && (\n                      <Button size=\"sm\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                        <Link href={`/dashboard/pitch/${deck.id}/present`}>\n                          Present <ArrowRight className=\"h-3 w-3 ml-1\" />\n                        </Link>\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card className=\"bg-card border-border\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"h-8 w-8 text-accent\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No pitch decks yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Create compelling investor presentations with our AI-powered pitch deck builder\n              </p>\n              <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                <Link href=\"/dashboard/pitch/new\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Your First Pitch Deck\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  )\n}\n","size_bytes":8224},"app/dashboard/ideas/[id]/page.tsx":{"content":"import { redirect, notFound } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/server\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  ArrowLeft,\n  TrendingUp,\n  AlertTriangle,\n  CheckCircle,\n  Lightbulb,\n  DollarSign,\n  Target,\n  ArrowRight,\n} from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default async function IdeaDetailsPage({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  const supabase = await createClient()\n\n  const { data, error } = await supabase.auth.getUser()\n  if (error || !data?.user) {\n    redirect(\"/auth/login\")\n  }\n\n  // Get the specific idea\n  const { data: idea, error: ideaError } = await supabase\n    .from(\"startup_ideas\")\n    .select(\"*\")\n    .eq(\"id\", id)\n    .eq(\"user_id\", data.user.id)\n    .single()\n\n  if (ideaError || !idea) {\n    notFound()\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"validated\":\n        return \"bg-green-500/10 text-green-500 border-green-500/20\"\n      case \"validating\":\n        return \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\"\n      case \"rejected\":\n        return \"bg-red-500/10 text-red-500 border-red-500/20\"\n      default:\n        return \"bg-muted text-muted-foreground border-border\"\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"validated\":\n        return \"Validated\"\n      case \"validating\":\n        return \"Needs More Work\"\n      case \"rejected\":\n        return \"High Risk\"\n      default:\n        return \"Draft\"\n    }\n  }\n\n  const validationData = (idea.validation_data as any) || {}\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/dashboard/ideas\" className=\"text-muted-foreground hover:text-foreground\">\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">{idea.title}</h1>\n            <p className=\"text-muted-foreground mt-1\">Created on {new Date(idea.created_at).toLocaleDateString()}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Badge className={getStatusColor(idea.status)}>{getStatusText(idea.status)}</Badge>\n          {idea.status === \"validated\" && (\n            <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n              <Link href={`/dashboard/mvp/new?ideaId=${idea.id}`}>\n                Build MVP <ArrowRight className=\"h-4 w-4 ml-2\" />\n              </Link>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Validation Score */}\n      {idea.validation_score > 0 && (\n        <Card className=\"bg-card border-border\">\n          <CardHeader>\n            <CardTitle className=\"text-foreground flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5 text-accent\" />\n              <span>Validation Score</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className=\"text-sm font-medium text-foreground\">Overall Score</span>\n                  <span className=\"text-2xl font-bold text-foreground\">{idea.validation_score}/100</span>\n                </div>\n                <Progress value={idea.validation_score} className=\"h-3\" />\n              </div>\n              <div className=\"text-center\">\n                <div\n                  className={`w-16 h-16 rounded-full flex items-center justify-center ${\n                    idea.validation_score >= 80\n                      ? \"bg-green-500/10\"\n                      : idea.validation_score >= 60\n                        ? \"bg-yellow-500/10\"\n                        : \"bg-red-500/10\"\n                  }`}\n                >\n                  {idea.validation_score >= 80 ? (\n                    <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                  ) : idea.validation_score >= 60 ? (\n                    <Lightbulb className=\"h-8 w-8 text-yellow-500\" />\n                  ) : (\n                    <AlertTriangle className=\"h-8 w-8 text-red-500\" />\n                  )}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {idea.validation_score >= 80 ? \"Strong\" : idea.validation_score >= 60 ? \"Promising\" : \"Risky\"}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Left Column - Idea Details */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Idea Overview */}\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground\">Idea Overview</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium text-foreground mb-2\">Description</h4>\n                <p className=\"text-muted-foreground\">{idea.description}</p>\n              </div>\n\n              {idea.problem_statement && (\n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Problem Statement</h4>\n                  <p className=\"text-muted-foreground\">{idea.problem_statement}</p>\n                </div>\n              )}\n\n              {idea.solution_approach && (\n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Solution Approach</h4>\n                  <p className=\"text-muted-foreground\">{idea.solution_approach}</p>\n                </div>\n              )}\n\n              {idea.target_market && (\n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Target Market</h4>\n                  <p className=\"text-muted-foreground\">{idea.target_market}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Market Analysis */}\n          {validationData.market_size && (\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                  <DollarSign className=\"h-5 w-5 text-accent\" />\n                  <span>Market Analysis</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"p-4 bg-accent/5 rounded-lg border border-accent/20\">\n                    <h4 className=\"font-medium text-foreground mb-1\">Market Size</h4>\n                    <p className=\"text-2xl font-bold text-accent\">{validationData.market_size}</p>\n                  </div>\n                  <div className=\"p-4 bg-muted/20 rounded-lg\">\n                    <h4 className=\"font-medium text-foreground mb-1\">Competition Level</h4>\n                    <p className=\"text-lg font-semibold text-foreground\">{validationData.competition_level}</p>\n                  </div>\n                </div>\n\n                {validationData.demand_indicators && (\n                  <div>\n                    <h4 className=\"font-medium text-foreground mb-2\">Demand Indicators</h4>\n                    <ul className=\"space-y-1\">\n                      {validationData.demand_indicators.map((indicator: string, index: number) => (\n                        <li key={index} className=\"flex items-center space-x-2 text-muted-foreground\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                          <span>{indicator}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Recommendations */}\n          {validationData.recommendations && (\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                  <Target className=\"h-5 w-5 text-accent\" />\n                  <span>AI Recommendations</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3\">\n                  {validationData.recommendations.map((rec: string, index: number) => (\n                    <li\n                      key={index}\n                      className=\"flex items-start space-x-3 p-3 bg-accent/5 rounded-lg border border-accent/20\"\n                    >\n                      <Lightbulb className=\"h-4 w-4 text-accent mt-0.5\" />\n                      <span className=\"text-muted-foreground\">{rec}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Right Column - Insights */}\n        <div className=\"space-y-6\">\n          {/* Opportunities */}\n          {validationData.opportunities && (\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                  <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                  <span>Opportunities</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {validationData.opportunities.map((opp: string, index: number) => (\n                    <li key={index} className=\"flex items-start space-x-2 text-sm\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500 mt-0.5\" />\n                      <span className=\"text-muted-foreground\">{opp}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Risk Factors */}\n          {validationData.risk_factors && (\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                  <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                  <span>Risk Factors</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-2\">\n                  {validationData.risk_factors.map((risk: string, index: number) => (\n                    <li key={index} className=\"flex items-start space-x-2 text-sm\">\n                      <AlertTriangle className=\"h-4 w-4 text-yellow-500 mt-0.5\" />\n                      <span className=\"text-muted-foreground\">{risk}</span>\n                    </li>\n                  ))}\n                </ul>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Next Steps */}\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground\">Next Steps</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {idea.status === \"validated\" ? (\n                <>\n                  <Button className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n                    <Link href={`/dashboard/mvp/new?ideaId=${idea.id}`}>\n                      <ArrowRight className=\"h-4 w-4 mr-2\" />\n                      Build MVP\n                    </Link>\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full bg-transparent\" asChild>\n                    <Link href={`/dashboard/pitch/new?ideaId=${idea.id}`}>Create Pitch Deck</Link>\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <Button variant=\"outline\" className=\"w-full bg-transparent\" asChild>\n                    <Link href={`/dashboard/ideas/new`}>Refine Idea</Link>\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full bg-transparent\" asChild>\n                    <Link href=\"/dashboard/network\">Get Feedback</Link>\n                  </Button>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":12731},"app/dashboard/ideas/new/page.tsx":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Lightbulb, ArrowRight, ArrowLeft, Loader2 } from \"lucide-react\"\nimport Link from \"next/link\"\n\nconst steps = [\n  { id: 1, title: \"Basic Info\", description: \"Tell us about your idea\" },\n  { id: 2, title: \"Problem & Solution\", description: \"Define the problem and your solution\" },\n  { id: 3, title: \"Market & Audience\", description: \"Identify your target market\" },\n  { id: 4, title: \"Validation\", description: \"AI-powered analysis and validation\" },\n]\n\nexport default function NewIdeaPage() {\n  const [currentStep, setCurrentStep] = useState(1)\n  const [isValidating, setIsValidating] = useState(false)\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    problem_statement: \"\",\n    solution_approach: \"\",\n    target_market: \"\",\n  })\n  const router = useRouter()\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }))\n  }\n\n  const handleNext = () => {\n    if (currentStep < steps.length) {\n      setCurrentStep(currentStep + 1)\n    }\n  }\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1)\n    }\n  }\n\n  const handleValidate = async () => {\n    setIsValidating(true)\n    const supabase = createClient()\n\n    try {\n      // Get current user\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) throw new Error(\"Not authenticated\")\n\n      // Simulate AI validation process\n      await new Promise((resolve) => setTimeout(resolve, 3000))\n\n      // Generate mock validation score and data\n      const validationScore = Math.floor(Math.random() * 40) + 60 // 60-100 range\n      const validationData = {\n        market_size: \"$2.5B\",\n        competition_level: \"Medium\",\n        demand_indicators: [\"Growing search trends\", \"Active communities\", \"Existing solutions with gaps\"],\n        risk_factors: [\"Market saturation\", \"High customer acquisition cost\"],\n        opportunities: [\"Underserved niche\", \"Technology advancement\", \"Changing user behavior\"],\n        recommendations: [\n          \"Focus on specific user segment initially\",\n          \"Validate with potential customers\",\n          \"Consider MVP features carefully\",\n        ],\n      }\n\n      // Save to database\n      const { data, error } = await supabase\n        .from(\"startup_ideas\")\n        .insert({\n          user_id: user.id,\n          title: formData.title,\n          description: formData.description,\n          problem_statement: formData.problem_statement,\n          solution_approach: formData.solution_approach,\n          target_market: formData.target_market,\n          validation_score: validationScore,\n          validation_data: validationData,\n          status: validationScore >= 70 ? \"validated\" : \"validating\",\n        })\n        .select()\n        .single()\n\n      if (error) throw error\n\n      // Redirect to the idea details page\n      router.push(`/dashboard/ideas/${data.id}`)\n    } catch (error) {\n      console.error(\"Error validating idea:\", error)\n    } finally {\n      setIsValidating(false)\n    }\n  }\n\n  const progress = (currentStep / steps.length) * 100\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Link href=\"/dashboard/ideas\" className=\"text-muted-foreground hover:text-foreground\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n          <h1 className=\"text-3xl font-bold text-foreground\">Validate New Idea</h1>\n        </div>\n        <p className=\"text-muted-foreground\">\n          Let our AI analyze your startup idea and provide comprehensive validation insights\n        </p>\n      </div>\n\n      {/* Progress */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex items-center\">\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  currentStep >= step.id ? \"bg-accent text-accent-foreground\" : \"bg-muted text-muted-foreground\"\n                }`}\n              >\n                {step.id}\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`w-16 h-0.5 mx-2 ${currentStep > step.id ? \"bg-accent\" : \"bg-muted\"}`} />\n              )}\n            </div>\n          ))}\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n        <div className=\"flex justify-between mt-2\">\n          <span className=\"text-sm text-muted-foreground\">{steps[currentStep - 1]?.title}</span>\n          <span className=\"text-sm text-muted-foreground\">\n            {currentStep} of {steps.length}\n          </span>\n        </div>\n      </div>\n\n      {/* Form Steps */}\n      <Card className=\"bg-card border-border\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">{steps[currentStep - 1]?.title}</CardTitle>\n          <CardDescription className=\"text-muted-foreground\">{steps[currentStep - 1]?.description}</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {currentStep === 1 && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\" className=\"text-foreground\">\n                  Idea Title\n                </Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., AI-powered fitness coach for busy professionals\"\n                  value={formData.title}\n                  onChange={(e) => handleInputChange(\"title\", e.target.value)}\n                  className=\"bg-input border-border text-foreground\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\" className=\"text-foreground\">\n                  Brief Description\n                </Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Describe your startup idea in 2-3 sentences...\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n            </>\n          )}\n\n          {currentStep === 2 && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"problem\" className=\"text-foreground\">\n                  Problem Statement\n                </Label>\n                <Textarea\n                  id=\"problem\"\n                  placeholder=\"What specific problem does your idea solve? Who experiences this problem?\"\n                  value={formData.problem_statement}\n                  onChange={(e) => handleInputChange(\"problem_statement\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"solution\" className=\"text-foreground\">\n                  Solution Approach\n                </Label>\n                <Textarea\n                  id=\"solution\"\n                  placeholder=\"How does your idea solve this problem? What makes it unique?\"\n                  value={formData.solution_approach}\n                  onChange={(e) => handleInputChange(\"solution_approach\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n            </>\n          )}\n\n          {currentStep === 3 && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"target_market\" className=\"text-foreground\">\n                  Target Market\n                </Label>\n                <Textarea\n                  id=\"target_market\"\n                  placeholder=\"Who is your ideal customer? Demographics, behaviors, pain points...\"\n                  value={formData.target_market}\n                  onChange={(e) => handleInputChange(\"target_market\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n              <div className=\"p-4 bg-accent/5 rounded-lg border border-accent/20\">\n                <h4 className=\"font-medium text-foreground mb-2\">💡 Tip</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Be specific about your target market. Instead of \"everyone,\" focus on a particular segment like\n                  \"working parents aged 25-40 in urban areas\" or \"small business owners with 5-50 employees.\"\n                </p>\n              </div>\n            </>\n          )}\n\n          {currentStep === 4 && (\n            <div className=\"text-center py-8\">\n              {!isValidating ? (\n                <>\n                  <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Lightbulb className=\"h-8 w-8 text-accent\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Ready to Validate</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Our AI will analyze your idea across multiple dimensions including market size, competition, demand\n                    indicators, and provide actionable recommendations.\n                  </p>\n                  <Button onClick={handleValidate} className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                    Start AI Validation\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Loader2 className=\"h-8 w-8 text-accent animate-spin\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Validating Your Idea</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Analyzing market data, competitor landscape, and demand signals...\n                  </p>\n                  <div className=\"max-w-md mx-auto\">\n                    <Progress value={66} className=\"h-2\" />\n                    <p className=\"text-sm text-muted-foreground mt-2\">This may take a few moments</p>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      {currentStep < 4 && (\n        <div className=\"flex justify-between mt-6\">\n          <Button variant=\"outline\" onClick={handleBack} disabled={currentStep === 1} className=\"bg-transparent\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          <Button\n            onClick={handleNext}\n            disabled={\n              (currentStep === 1 && (!formData.title || !formData.description)) ||\n              (currentStep === 2 && (!formData.problem_statement || !formData.solution_approach)) ||\n              (currentStep === 3 && !formData.target_market)\n            }\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          >\n            Next\n            <ArrowRight className=\"h-4 w-4 ml-2\" />\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":11977},"app/dashboard/mvp/[id]/page.tsx":{"content":"import { redirect, notFound } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/server\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ArrowLeft, Code, Globe, ExternalLink, Download, Rocket, Eye, Settings, FileText } from \"lucide-react\"\nimport Link from \"next/link\"\nimport Image from \"next/image\"\n\nexport default async function MVPDetailsPage({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  const supabase = await createClient()\n\n  const { data, error } = await supabase.auth.getUser()\n  if (error || !data?.user) {\n    redirect(\"/auth/login\")\n  }\n\n  // Get the specific MVP project\n  const { data: project, error: projectError } = await supabase\n    .from(\"mvp_projects\")\n    .select(\"*\")\n    .eq(\"id\", id)\n    .eq(\"user_id\", data.user.id)\n    .single()\n\n  if (projectError || !project) {\n    notFound()\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-500/10 text-green-500 border-green-500/20\"\n      case \"generating\":\n        return \"bg-blue-500/10 text-blue-500 border-blue-500/20\"\n      case \"deployed\":\n        return \"bg-purple-500/10 text-purple-500 border-purple-500/20\"\n      default:\n        return \"bg-muted text-muted-foreground border-border\"\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"Ready to Deploy\"\n      case \"generating\":\n        return \"Building\"\n      case \"deployed\":\n        return \"Live\"\n      default:\n        return \"Planning\"\n    }\n  }\n\n  const wireframes = (project.wireframes as any[]) || []\n  const features = (project.features as string[]) || []\n  const techStack = (project.tech_stack as string[]) || []\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/dashboard/mvp\" className=\"text-muted-foreground hover:text-foreground\">\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">{project.name}</h1>\n            <p className=\"text-muted-foreground mt-1\">Created on {new Date(project.created_at).toLocaleDateString()}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Badge className={getStatusColor(project.status)}>{getStatusText(project.status)}</Badge>\n          {project.status === \"completed\" && !project.deployment_url && (\n            <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n              <Link href={`/dashboard/mvp/${project.id}/deploy`}>\n                <Rocket className=\"h-4 w-4 mr-2\" />\n                Deploy\n              </Link>\n            </Button>\n          )}\n          {project.deployment_url && (\n            <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n              <Link href={project.deployment_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                View Live\n              </Link>\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Project Overview */}\n      <Card className=\"bg-card border-border\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Project Overview</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-muted-foreground\">{project.description}</p>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"p-4 bg-accent/5 rounded-lg border border-accent/20\">\n              <h4 className=\"font-medium text-foreground mb-1\">Features</h4>\n              <p className=\"text-2xl font-bold text-accent\">{features.length}</p>\n            </div>\n            <div className=\"p-4 bg-muted/20 rounded-lg\">\n              <h4 className=\"font-medium text-foreground mb-1\">Tech Stack</h4>\n              <p className=\"text-lg font-semibold text-foreground\">{techStack.join(\", \")}</p>\n            </div>\n            <div className=\"p-4 bg-muted/20 rounded-lg\">\n              <h4 className=\"font-medium text-foreground mb-1\">Status</h4>\n              <p className=\"text-lg font-semibold text-foreground\">{getStatusText(project.status)}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"wireframes\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"wireframes\">Wireframes</TabsTrigger>\n          <TabsTrigger value=\"features\">Features</TabsTrigger>\n          <TabsTrigger value=\"code\">Code</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"wireframes\" className=\"space-y-4\">\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                <Eye className=\"h-5 w-5 text-accent\" />\n                <span>Wireframes & Mockups</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {wireframes.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {wireframes.map((wireframe, index) => (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"aspect-video bg-muted rounded-lg overflow-hidden\">\n                        <Image\n                          src={wireframe.url || \"/placeholder.svg\"}\n                          alt={wireframe.name}\n                          width={400}\n                          height={300}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                      <h4 className=\"font-medium text-foreground\">{wireframe.name}</h4>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Eye className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No wireframes available</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"features\" className=\"space-y-4\">\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                <Settings className=\"h-5 w-5 text-accent\" />\n                <span>Features & Functionality</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {features.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {features.map((feature, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center space-x-3 p-3 bg-accent/5 rounded-lg border border-accent/20\"\n                    >\n                      <div className=\"w-2 h-2 bg-accent rounded-full\"></div>\n                      <span className=\"text-foreground\">{feature}</span>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Settings className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No features defined</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"code\" className=\"space-y-4\">\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                  <Code className=\"h-5 w-5 text-accent\" />\n                  <span>Generated Code</span>\n                </CardTitle>\n                <Button variant=\"outline\" size=\"sm\" className=\"bg-transparent\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {project.generated_code ? (\n                <div className=\"bg-muted/20 rounded-lg p-4 overflow-x-auto\">\n                  <pre className=\"text-sm text-foreground whitespace-pre-wrap\">\n                    <code>{project.generated_code}</code>\n                  </pre>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Code className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No code generated yet</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                <Settings className=\"h-5 w-5 text-accent\" />\n                <span>Project Settings</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Technology Stack</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {techStack.map((tech, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-accent border-accent/20\">\n                        {tech}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium text-foreground mb-2\">Deployment</h4>\n                  {project.deployment_url ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <Globe className=\"h-4 w-4 text-green-500\" />\n                      <Link\n                        href={project.deployment_url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-accent hover:text-accent/80 underline\"\n                      >\n                        {project.deployment_url}\n                      </Link>\n                    </div>\n                  ) : (\n                    <p className=\"text-muted-foreground\">Not deployed yet</p>\n                  )}\n                </div>\n\n                <div className=\"pt-4 border-t border-border\">\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" className=\"bg-transparent\">\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Export Project\n                    </Button>\n                    <Button variant=\"outline\" className=\"bg-transparent\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Edit Settings\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","size_bytes":11778},"app/dashboard/mvp/new/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/dashboard/mvp/new/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useRouter, useSearchParams } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ArrowLeft, ArrowRight, Code, Globe, Smartphone, Database, Loader2, CheckCircle, Lightbulb } from \"lucide-react\"\nimport Link from \"next/link\"\n\nconst steps = [\n  { id: 1, title: \"Project Setup\", description: \"Basic information about your MVP\" },\n  { id: 2, title: \"Features\", description: \"Define core features and functionality\" },\n  { id: 3, title: \"Tech Stack\", description: \"Choose your technology preferences\" },\n  { id: 4, title: \"Generation\", description: \"AI builds your MVP\" },\n]\n\nconst techStackOptions = [\n  { id: \"nextjs\", name: \"Next.js\", description: \"React framework for web apps\", icon: Globe },\n  { id: \"react-native\", name: \"React Native\", description: \"Cross-platform mobile apps\", icon: Smartphone },\n  { id: \"api\", name: \"REST API\", description: \"Backend API service\", icon: Database },\n  { id: \"database\", name: \"Database\", description: \"Data storage and management\", icon: Database },\n]\n\nconst commonFeatures = [\n  \"User Authentication\",\n  \"User Profiles\",\n  \"Dashboard\",\n  \"Search Functionality\",\n  \"Notifications\",\n  \"Payment Integration\",\n  \"File Upload\",\n  \"Real-time Updates\",\n  \"Admin Panel\",\n  \"Analytics\",\n  \"Email Integration\",\n  \"Social Login\",\n]\n\nexport default function NewMVPPage() {\n  const [currentStep, setCurrentStep] = useState(1)\n  const [isGenerating, setIsGenerating] = useState(false)\n  const [linkedIdea, setLinkedIdea] = useState<any>(null)\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    features: [] as string[],\n    tech_stack: [] as string[],\n    custom_requirements: \"\",\n  })\n\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const ideaId = searchParams.get(\"ideaId\")\n\n  useEffect(() => {\n    if (ideaId) {\n      fetchLinkedIdea(ideaId)\n    }\n  }, [ideaId])\n\n  const fetchLinkedIdea = async (id: string) => {\n    const supabase = createClient()\n    const { data } = await supabase.from(\"startup_ideas\").select(\"*\").eq(\"id\", id).single()\n    if (data) {\n      setLinkedIdea(data)\n      setFormData((prev) => ({\n        ...prev,\n        name: `${data.title} MVP`,\n        description: `MVP for ${data.title}: ${data.description}`,\n      }))\n    }\n  }\n\n  const handleInputChange = (field: string, value: string | string[]) => {\n    setFormData((prev) => ({ ...prev, [field]: value }))\n  }\n\n  const handleFeatureToggle = (feature: string) => {\n    setFormData((prev) => ({\n      ...prev,\n      features: prev.features.includes(feature)\n        ? prev.features.filter((f) => f !== feature)\n        : [...prev.features, feature],\n    }))\n  }\n\n  const handleTechStackToggle = (tech: string) => {\n    setFormData((prev) => ({\n      ...prev,\n      tech_stack: prev.tech_stack.includes(tech)\n        ? prev.tech_stack.filter((t) => t !== tech)\n        : [...prev.tech_stack, tech],\n    }))\n  }\n\n  const handleNext = () => {\n    if (currentStep < steps.length) {\n      setCurrentStep(currentStep + 1)\n    }\n  }\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1)\n    }\n  }\n\n  const handleGenerate = async () => {\n    setIsGenerating(true)\n    const supabase = createClient()\n\n    try {\n      // Get current user\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) throw new Error(\"Not authenticated\")\n\n      // Simulate MVP generation process\n      await new Promise((resolve) => setTimeout(resolve, 5000))\n\n      // Generate mock wireframes and code structure\n      const wireframes = [\n        { name: \"Landing Page\", url: \"/landing-page-wireframe.jpg\" },\n        { name: \"Dashboard\", url: \"/dashboard-wireframe.png\" },\n        { name: \"User Profile\", url: \"/user-profile-wireframe.jpg\" },\n      ]\n\n      const generatedCode = `// Generated MVP Structure\n// This is a simplified representation of your generated MVP\n\n// Main App Component\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <Router>\n        <Routes>\n          <Route path=\"/\" component={LandingPage} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/profile\" component={UserProfile} />\n        </Routes>\n      </Router>\n      <Footer />\n    </div>\n  );\n}\n\n// Features implemented:\n${formData.features.map((feature) => `// - ${feature}`).join(\"\\n\")}\n\n// Tech Stack:\n${formData.tech_stack.map((tech) => `// - ${tech}`).join(\"\\n\")}\n`\n\n      // Save to database\n      const { data, error } = await supabase\n        .from(\"mvp_projects\")\n        .insert({\n          user_id: user.id,\n          idea_id: ideaId || null,\n          name: formData.name,\n          description: formData.description,\n          tech_stack: formData.tech_stack,\n          features: formData.features,\n          wireframes: wireframes,\n          generated_code: generatedCode,\n          status: \"completed\",\n        })\n        .select()\n        .single()\n\n      if (error) throw error\n\n      // Redirect to the MVP details page\n      router.push(`/dashboard/mvp/${data.id}`)\n    } catch (error) {\n      console.error(\"Error generating MVP:\", error)\n    } finally {\n      setIsGenerating(false)\n    }\n  }\n\n  const progress = (currentStep / steps.length) * 100\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Link href=\"/dashboard/mvp\" className=\"text-muted-foreground hover:text-foreground\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n          <h1 className=\"text-3xl font-bold text-foreground\">Build New MVP</h1>\n        </div>\n        {linkedIdea && (\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <Lightbulb className=\"h-4 w-4 text-accent\" />\n            <span className=\"text-sm text-muted-foreground\">\n              Building MVP for: <span className=\"text-foreground font-medium\">{linkedIdea.title}</span>\n            </span>\n          </div>\n        )}\n        <p className=\"text-muted-foreground\">\n          Create a functional prototype of your idea with AI-powered no-code tools\n        </p>\n      </div>\n\n      {/* Progress */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex items-center\">\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  currentStep >= step.id ? \"bg-accent text-accent-foreground\" : \"bg-muted text-muted-foreground\"\n                }`}\n              >\n                {step.id}\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`w-16 h-0.5 mx-2 ${currentStep > step.id ? \"bg-accent\" : \"bg-muted\"}`} />\n              )}\n            </div>\n          ))}\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n        <div className=\"flex justify-between mt-2\">\n          <span className=\"text-sm text-muted-foreground\">{steps[currentStep - 1]?.title}</span>\n          <span className=\"text-sm text-muted-foreground\">\n            {currentStep} of {steps.length}\n          </span>\n        </div>\n      </div>\n\n      {/* Form Steps */}\n      <Card className=\"bg-card border-border\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">{steps[currentStep - 1]?.title}</CardTitle>\n          <CardDescription className=\"text-muted-foreground\">{steps[currentStep - 1]?.description}</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {currentStep === 1 && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\" className=\"text-foreground\">\n                  MVP Name\n                </Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"e.g., FitTracker MVP, TaskManager Pro\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                  className=\"bg-input border-border text-foreground\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\" className=\"text-foreground\">\n                  Project Description\n                </Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Describe what your MVP will do and who it's for...\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n            </>\n          )}\n\n          {currentStep === 2 && (\n            <>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-foreground text-base font-medium\">Core Features</Label>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Select the essential features for your MVP. Start with 3-5 core features.\n                  </p>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {commonFeatures.map((feature) => (\n                    <div key={feature} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={feature}\n                        checked={formData.features.includes(feature)}\n                        onCheckedChange={() => handleFeatureToggle(feature)}\n                      />\n                      <Label htmlFor={feature} className=\"text-sm text-foreground cursor-pointer\">\n                        {feature}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"custom_requirements\" className=\"text-foreground\">\n                    Custom Requirements\n                  </Label>\n                  <Textarea\n                    id=\"custom_requirements\"\n                    placeholder=\"Any specific features or requirements not listed above...\"\n                    value={formData.custom_requirements}\n                    onChange={(e) => handleInputChange(\"custom_requirements\", e.target.value)}\n                    className=\"bg-input border-border text-foreground\"\n                  />\n                </div>\n              </div>\n            </>\n          )}\n\n          {currentStep === 3 && (\n            <>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-foreground text-base font-medium\">Technology Stack</Label>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Choose the technologies you'd like to use for your MVP.\n                  </p>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {techStackOptions.map((tech) => (\n                    <div\n                      key={tech.id}\n                      className={`p-4 rounded-lg border cursor-pointer transition-colors ${\n                        formData.tech_stack.includes(tech.id)\n                          ? \"border-accent bg-accent/5\"\n                          : \"border-border hover:border-accent/50\"\n                      }`}\n                      onClick={() => handleTechStackToggle(tech.id)}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <tech.icon className=\"h-5 w-5 text-accent\" />\n                        <div>\n                          <h4 className=\"font-medium text-foreground\">{tech.name}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{tech.description}</p>\n                        </div>\n                        {formData.tech_stack.includes(tech.id) && (\n                          <CheckCircle className=\"h-5 w-5 text-accent ml-auto\" />\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </>\n          )}\n\n          {currentStep === 4 && (\n            <div className=\"text-center py-8\">\n              {!isGenerating ? (\n                <>\n                  <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Code className=\"h-8 w-8 text-accent\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Ready to Generate</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Our AI will create wireframes, generate code, and build your MVP based on your specifications.\n                  </p>\n                  <div className=\"space-y-4 mb-6\">\n                    <div className=\"flex items-center justify-between p-3 bg-muted/20 rounded-lg\">\n                      <span className=\"text-sm text-foreground\">Features</span>\n                      <Badge variant=\"outline\">{formData.features.length} selected</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-muted/20 rounded-lg\">\n                      <span className=\"text-sm text-foreground\">Tech Stack</span>\n                      <Badge variant=\"outline\">{formData.tech_stack.length} technologies</Badge>\n                    </div>\n                  </div>\n                  <Button onClick={handleGenerate} className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                    Generate MVP\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Loader2 className=\"h-8 w-8 text-accent animate-spin\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Generating Your MVP</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Creating wireframes, generating code, and setting up your project structure...\n                  </p>\n                  <div className=\"max-w-md mx-auto\">\n                    <Progress value={75} className=\"h-2\" />\n                    <p className=\"text-sm text-muted-foreground mt-2\">This may take a few minutes</p>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      {currentStep < 4 && (\n        <div className=\"flex justify-between mt-6\">\n          <Button variant=\"outline\" onClick={handleBack} disabled={currentStep === 1} className=\"bg-transparent\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          <Button\n            onClick={handleNext}\n            disabled={\n              (currentStep === 1 && (!formData.name || !formData.description)) ||\n              (currentStep === 2 && formData.features.length === 0) ||\n              (currentStep === 3 && formData.tech_stack.length === 0)\n            }\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          >\n            Next\n            <ArrowRight className=\"h-4 w-4 ml-2\" />\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":16054},"app/dashboard/pitch/[id]/page.tsx":{"content":"import { redirect, notFound } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/server\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { ArrowLeft, FileText, Download, Share, Eye, Edit, Presentation, ExternalLink } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default async function PitchDeckDetailsPage({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const { id } = await params\n  const supabase = await createClient()\n\n  const { data, error } = await supabase.auth.getUser()\n  if (error || !data?.user) {\n    redirect(\"/auth/login\")\n  }\n\n  // Get the specific pitch deck\n  const { data: pitchDeck, error: pitchError } = await supabase\n    .from(\"pitch_decks\")\n    .select(\"*\")\n    .eq(\"id\", id)\n    .eq(\"user_id\", data.user.id)\n    .single()\n\n  if (pitchError || !pitchDeck) {\n    notFound()\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-500/10 text-green-500 border-green-500/20\"\n      case \"generating\":\n        return \"bg-blue-500/10 text-blue-500 border-blue-500/20\"\n      case \"shared\":\n        return \"bg-purple-500/10 text-purple-500 border-purple-500/20\"\n      default:\n        return \"bg-muted text-muted-foreground border-border\"\n    }\n  }\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"Ready to Present\"\n      case \"generating\":\n        return \"Building\"\n      case \"shared\":\n        return \"Shared with Investors\"\n      default:\n        return \"Draft\"\n    }\n  }\n\n  const slides = (pitchDeck.slides as any[]) || []\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/dashboard/pitch\" className=\"text-muted-foreground hover:text-foreground\">\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">{pitchDeck.title}</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Created on {new Date(pitchDeck.created_at).toLocaleDateString()}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Badge className={getStatusColor(pitchDeck.status)}>{getStatusText(pitchDeck.status)}</Badge>\n          <Button variant=\"outline\" size=\"sm\" className=\"bg-transparent\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export PDF\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"bg-transparent\">\n            <Share className=\"h-4 w-4 mr-2\" />\n            Share\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" asChild className=\"bg-transparent\">\n            <Link href={`/dashboard/pitch/${pitchDeck.id}/edit`}>\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit\n            </Link>\n          </Button>\n          <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" asChild>\n            <Link href={`/dashboard/pitch/${pitchDeck.id}/present`}>\n              <Presentation className=\"h-4 w-4 mr-2\" />\n              Present\n            </Link>\n          </Button>\n        </div>\n      </div>\n\n      {/* Pitch Deck Overview */}\n      <Card className=\"bg-card border-border\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">Pitch Deck Overview</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-muted-foreground\">{pitchDeck.description}</p>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"p-4 bg-accent/5 rounded-lg border border-accent/20\">\n              <h4 className=\"font-medium text-foreground mb-1\">Slides</h4>\n              <p className=\"text-2xl font-bold text-accent\">{slides.length}</p>\n            </div>\n            <div className=\"p-4 bg-muted/20 rounded-lg\">\n              <h4 className=\"font-medium text-foreground mb-1\">Pitch Type</h4>\n              <p className=\"text-lg font-semibold text-foreground capitalize\">\n                {pitchDeck.pitch_type?.replace(\"-\", \" \")}\n              </p>\n            </div>\n            <div className=\"p-4 bg-muted/20 rounded-lg\">\n              <h4 className=\"font-medium text-foreground mb-1\">Views</h4>\n              <p className=\"text-lg font-semibold text-foreground\">{Math.floor(Math.random() * 50) + 10}</p>\n            </div>\n            <div className=\"p-4 bg-muted/20 rounded-lg\">\n              <h4 className=\"font-medium text-foreground mb-1\">Status</h4>\n              <p className=\"text-lg font-semibold text-foreground\">{getStatusText(pitchDeck.status)}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"slides\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"slides\">Slides</TabsTrigger>\n          <TabsTrigger value=\"content\">Content</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"slides\" className=\"space-y-4\">\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                  <FileText className=\"h-5 w-5 text-accent\" />\n                  <span>Slide Preview</span>\n                </CardTitle>\n                <Button variant=\"outline\" size=\"sm\" className=\"bg-transparent\">\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Edit Slides\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {slides.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {slides.map((slide, index) => (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"aspect-video bg-gradient-to-br from-accent/10 to-accent/5 rounded-lg border border-accent/20 p-4 flex flex-col justify-center\">\n                        <h4 className=\"font-semibold text-foreground text-center mb-2\">{slide.title}</h4>\n                        <div className=\"text-xs text-muted-foreground text-center\">\n                          {slide.content?.title && <p className=\"font-medium\">{slide.content.title}</p>}\n                          {slide.content?.description && (\n                            <p className=\"mt-1 line-clamp-2\">{slide.content.description}</p>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium text-foreground\">{slide.title}</span>\n                        <span className=\"text-xs text-muted-foreground\">Slide {index + 1}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No slides available</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"content\" className=\"space-y-4\">\n          <Card className=\"bg-card border-border\">\n            <CardHeader>\n              <CardTitle className=\"text-foreground\">Pitch Content</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {slides.map((slide, index) => (\n                <div key={index} className=\"p-4 bg-muted/10 rounded-lg border border-border\">\n                  <h4 className=\"font-semibold text-foreground mb-3\">{slide.title}</h4>\n                  <div className=\"space-y-2 text-sm text-muted-foreground\">\n                    {slide.content?.title && (\n                      <div>\n                        <span className=\"font-medium text-foreground\">Title: </span>\n                        {slide.content.title}\n                      </div>\n                    )}\n                    {slide.content?.description && (\n                      <div>\n                        <span className=\"font-medium text-foreground\">Description: </span>\n                        {slide.content.description}\n                      </div>\n                    )}\n                    {slide.content?.features && (\n                      <div>\n                        <span className=\"font-medium text-foreground\">Features: </span>\n                        {slide.content.features.join(\", \")}\n                      </div>\n                    )}\n                    {slide.content?.metrics && (\n                      <div>\n                        <span className=\"font-medium text-foreground\">Metrics: </span>\n                        {slide.content.metrics.join(\", \")}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                  <Eye className=\"h-5 w-5 text-accent\" />\n                  <span>View Analytics</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-accent/5 rounded-lg border border-accent/20\">\n                  <span className=\"text-sm font-medium text-foreground\">Total Views</span>\n                  <span className=\"text-lg font-bold text-accent\">{Math.floor(Math.random() * 50) + 10}</span>\n                </div>\n                <div className=\"flex items-center justify-between p-3 bg-muted/20 rounded-lg\">\n                  <span className=\"text-sm font-medium text-foreground\">Unique Viewers</span>\n                  <span className=\"text-lg font-bold text-foreground\">{Math.floor(Math.random() * 30) + 5}</span>\n                </div>\n                <div className=\"flex items-center justify-between p-3 bg-muted/20 rounded-lg\">\n                  <span className=\"text-sm font-medium text-foreground\">Avg. Time Spent</span>\n                  <span className=\"text-lg font-bold text-foreground\">4:32</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card border-border\">\n              <CardHeader>\n                <CardTitle className=\"text-foreground flex items-center space-x-2\">\n                  <Share className=\"h-5 w-5 text-accent\" />\n                  <span>Sharing</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-3 bg-accent/5 rounded-lg border border-accent/20\">\n                  <p className=\"text-sm font-medium text-foreground mb-2\">Share Link</p>\n                  <div className=\"flex items-center space-x-2\">\n                    <code className=\"flex-1 text-xs bg-muted p-2 rounded text-muted-foreground\">\n                      https://founderos.com/pitch/{pitchDeck.id}\n                    </code>\n                    <Button size=\"sm\" variant=\"outline\" className=\"bg-transparent\">\n                      Copy\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Button variant=\"outline\" className=\"w-full bg-transparent\">\n                    <ExternalLink className=\"h-4 w-4 mr-2\" />\n                    Share via Email\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full bg-transparent\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Download PDF\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n","size_bytes":12626},"app/dashboard/pitch/new/loading.tsx":{"content":"export default function Loading() {\n  return null\n}\n","size_bytes":52},"app/dashboard/pitch/new/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useRouter, useSearchParams } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { ArrowLeft, ArrowRight, FileText, Loader2, Lightbulb, Target, DollarSign, Users } from \"lucide-react\"\nimport Link from \"next/link\"\n\nconst steps = [\n  { id: 1, title: \"Basic Info\", description: \"Pitch deck overview and goals\" },\n  { id: 2, title: \"Business Model\", description: \"Revenue and market strategy\" },\n  { id: 3, title: \"Team & Traction\", description: \"Team members and achievements\" },\n  { id: 4, title: \"Generation\", description: \"AI creates your pitch deck\" },\n]\n\nconst pitchTypes = [\n  { value: \"seed\", label: \"Seed Funding\", description: \"Early-stage funding for product development\" },\n  { value: \"series-a\", label: \"Series A\", description: \"Growth funding for scaling operations\" },\n  { value: \"series-b\", label: \"Series B\", description: \"Expansion funding for market leadership\" },\n  { value: \"demo-day\", label: \"Demo Day\", description: \"Accelerator or competition presentation\" },\n]\n\nexport default function NewPitchDeckPage() {\n  const [currentStep, setCurrentStep] = useState(1)\n  const [isGenerating, setIsGenerating] = useState(false)\n  const [linkedIdea, setLinkedIdea] = useState<any>(null)\n  const [linkedMVP, setLinkedMVP] = useState<any>(null)\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    pitch_type: \"\",\n    funding_goal: \"\",\n    business_model: \"\",\n    target_market: \"\",\n    team_info: \"\",\n    traction_metrics: \"\",\n    competitive_advantage: \"\",\n  })\n\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const ideaId = searchParams.get(\"ideaId\")\n  const mvpId = searchParams.get(\"mvpId\")\n\n  useEffect(() => {\n    if (ideaId) {\n      fetchLinkedIdea(ideaId)\n    }\n    if (mvpId) {\n      fetchLinkedMVP(mvpId)\n    }\n  }, [ideaId, mvpId])\n\n  const fetchLinkedIdea = async (id: string) => {\n    const supabase = createClient()\n    const { data } = await supabase.from(\"startup_ideas\").select(\"*\").eq(\"id\", id).single()\n    if (data) {\n      setLinkedIdea(data)\n      setFormData((prev) => ({\n        ...prev,\n        title: `${data.title} Pitch Deck`,\n        description: data.description,\n        target_market: data.target_market || \"\",\n      }))\n    }\n  }\n\n  const fetchLinkedMVP = async (id: string) => {\n    const supabase = createClient()\n    const { data } = await supabase.from(\"mvp_projects\").select(\"*\").eq(\"id\", id).single()\n    if (data) {\n      setLinkedMVP(data)\n      setFormData((prev) => ({\n        ...prev,\n        title: `${data.name} Pitch Deck`,\n        description: data.description,\n      }))\n    }\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }))\n  }\n\n  const handleNext = () => {\n    if (currentStep < steps.length) {\n      setCurrentStep(currentStep + 1)\n    }\n  }\n\n  const handleBack = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1)\n    }\n  }\n\n  const handleGenerate = async () => {\n    setIsGenerating(true)\n    const supabase = createClient()\n\n    try {\n      // Get current user\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) throw new Error(\"Not authenticated\")\n\n      // Simulate pitch deck generation process\n      await new Promise((resolve) => setTimeout(resolve, 4000))\n\n      // Generate mock slides\n      const slides = generateSlides(formData, linkedIdea, linkedMVP)\n\n      // Save to database\n      const { data, error } = await supabase\n        .from(\"pitch_decks\")\n        .insert({\n          user_id: user.id,\n          idea_id: ideaId || null,\n          mvp_id: mvpId || null,\n          title: formData.title,\n          description: formData.description,\n          pitch_type: formData.pitch_type,\n          slides: slides,\n          status: \"completed\",\n        })\n        .select()\n        .single()\n\n      if (error) throw error\n\n      // Redirect to the pitch deck details page\n      router.push(`/dashboard/pitch/${data.id}`)\n    } catch (error) {\n      console.error(\"Error generating pitch deck:\", error)\n    } finally {\n      setIsGenerating(false)\n    }\n  }\n\n  const progress = (currentStep / steps.length) * 100\n\n  return (\n    <div className=\"p-6 max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Link href=\"/dashboard/pitch\" className=\"text-muted-foreground hover:text-foreground\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Link>\n          <h1 className=\"text-3xl font-bold text-foreground\">Create Pitch Deck</h1>\n        </div>\n        {(linkedIdea || linkedMVP) && (\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <Lightbulb className=\"h-4 w-4 text-accent\" />\n            <span className=\"text-sm text-muted-foreground\">\n              Creating pitch deck for:{\" \"}\n              <span className=\"text-foreground font-medium\">{linkedIdea?.title || linkedMVP?.name}</span>\n            </span>\n          </div>\n        )}\n        <p className=\"text-muted-foreground\">Build investor-ready presentations with AI-powered content generation</p>\n      </div>\n\n      {/* Progress */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex items-center\">\n              <div\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  currentStep >= step.id ? \"bg-accent text-accent-foreground\" : \"bg-muted text-muted-foreground\"\n                }`}\n              >\n                {step.id}\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`w-16 h-0.5 mx-2 ${currentStep > step.id ? \"bg-accent\" : \"bg-muted\"}`} />\n              )}\n            </div>\n          ))}\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n        <div className=\"flex justify-between mt-2\">\n          <span className=\"text-sm text-muted-foreground\">{steps[currentStep - 1]?.title}</span>\n          <span className=\"text-sm text-muted-foreground\">\n            {currentStep} of {steps.length}\n          </span>\n        </div>\n      </div>\n\n      {/* Form Steps */}\n      <Card className=\"bg-card border-border\">\n        <CardHeader>\n          <CardTitle className=\"text-foreground\">{steps[currentStep - 1]?.title}</CardTitle>\n          <CardDescription className=\"text-muted-foreground\">{steps[currentStep - 1]?.description}</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {currentStep === 1 && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\" className=\"text-foreground\">\n                  Pitch Deck Title\n                </Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"e.g., FitTracker - Revolutionizing Personal Fitness\"\n                  value={formData.title}\n                  onChange={(e) => handleInputChange(\"title\", e.target.value)}\n                  className=\"bg-input border-border text-foreground\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\" className=\"text-foreground\">\n                  Company Description\n                </Label>\n                <Textarea\n                  id=\"description\"\n                  placeholder=\"Brief overview of your company and what it does...\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"pitch_type\" className=\"text-foreground\">\n                  Pitch Type\n                </Label>\n                <Select value={formData.pitch_type} onValueChange={(value) => handleInputChange(\"pitch_type\", value)}>\n                  <SelectTrigger className=\"bg-input border-border text-foreground\">\n                    <SelectValue placeholder=\"Select pitch type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {pitchTypes.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        <div>\n                          <div className=\"font-medium\">{type.label}</div>\n                          <div className=\"text-sm text-muted-foreground\">{type.description}</div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </>\n          )}\n\n          {currentStep === 2 && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"funding_goal\" className=\"text-foreground\">\n                  Funding Goal\n                </Label>\n                <Input\n                  id=\"funding_goal\"\n                  placeholder=\"e.g., $500K, $2M, $10M\"\n                  value={formData.funding_goal}\n                  onChange={(e) => handleInputChange(\"funding_goal\", e.target.value)}\n                  className=\"bg-input border-border text-foreground\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"business_model\" className=\"text-foreground\">\n                  Business Model\n                </Label>\n                <Textarea\n                  id=\"business_model\"\n                  placeholder=\"How do you make money? Revenue streams, pricing strategy...\"\n                  value={formData.business_model}\n                  onChange={(e) => handleInputChange(\"business_model\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"competitive_advantage\" className=\"text-foreground\">\n                  Competitive Advantage\n                </Label>\n                <Textarea\n                  id=\"competitive_advantage\"\n                  placeholder=\"What makes you different from competitors? Your unique value proposition...\"\n                  value={formData.competitive_advantage}\n                  onChange={(e) => handleInputChange(\"competitive_advantage\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n            </>\n          )}\n\n          {currentStep === 3 && (\n            <>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"team_info\" className=\"text-foreground\">\n                  Team Information\n                </Label>\n                <Textarea\n                  id=\"team_info\"\n                  placeholder=\"Key team members, their roles, and relevant experience...\"\n                  value={formData.team_info}\n                  onChange={(e) => handleInputChange(\"team_info\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"traction_metrics\" className=\"text-foreground\">\n                  Traction & Metrics\n                </Label>\n                <Textarea\n                  id=\"traction_metrics\"\n                  placeholder=\"Key achievements, user growth, revenue, partnerships, awards...\"\n                  value={formData.traction_metrics}\n                  onChange={(e) => handleInputChange(\"traction_metrics\", e.target.value)}\n                  className=\"bg-input border-border text-foreground min-h-[100px]\"\n                />\n              </div>\n              <div className=\"p-4 bg-accent/5 rounded-lg border border-accent/20\">\n                <h4 className=\"font-medium text-foreground mb-2\">💡 Tip</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Include specific numbers and metrics where possible. Investors love concrete data that shows growth\n                  and validation.\n                </p>\n              </div>\n            </>\n          )}\n\n          {currentStep === 4 && (\n            <div className=\"text-center py-8\">\n              {!isGenerating ? (\n                <>\n                  <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <FileText className=\"h-8 w-8 text-accent\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Ready to Generate</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Our AI will create a professional pitch deck with compelling content, visuals, and investor-focused\n                    messaging.\n                  </p>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                    <div className=\"p-3 bg-accent/5 rounded-lg border border-accent/20\">\n                      <Target className=\"h-6 w-6 text-accent mx-auto mb-2\" />\n                      <p className=\"text-sm font-medium text-foreground\">Problem & Solution</p>\n                    </div>\n                    <div className=\"p-3 bg-accent/5 rounded-lg border border-accent/20\">\n                      <DollarSign className=\"h-6 w-6 text-accent mx-auto mb-2\" />\n                      <p className=\"text-sm font-medium text-foreground\">Business Model</p>\n                    </div>\n                    <div className=\"p-3 bg-accent/5 rounded-lg border border-accent/20\">\n                      <Users className=\"h-6 w-6 text-accent mx-auto mb-2\" />\n                      <p className=\"text-sm font-medium text-foreground\">Team & Traction</p>\n                    </div>\n                  </div>\n                  <Button onClick={handleGenerate} className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n                    Generate Pitch Deck\n                  </Button>\n                </>\n              ) : (\n                <>\n                  <div className=\"w-16 h-16 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Loader2 className=\"h-8 w-8 text-accent animate-spin\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Creating Your Pitch Deck</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Generating slides, crafting compelling content, and designing professional layouts...\n                  </p>\n                  <div className=\"max-w-md mx-auto\">\n                    <Progress value={80} className=\"h-2\" />\n                    <p className=\"text-sm text-muted-foreground mt-2\">This may take a few moments</p>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Navigation */}\n      {currentStep < 4 && (\n        <div className=\"flex justify-between mt-6\">\n          <Button variant=\"outline\" onClick={handleBack} disabled={currentStep === 1} className=\"bg-transparent\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          <Button\n            onClick={handleNext}\n            disabled={\n              (currentStep === 1 && (!formData.title || !formData.description || !formData.pitch_type)) ||\n              (currentStep === 2 && (!formData.funding_goal || !formData.business_model)) ||\n              (currentStep === 3 && (!formData.team_info || !formData.traction_metrics))\n            }\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          >\n            Next\n            <ArrowRight className=\"h-4 w-4 ml-2\" />\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n\n// Helper function to generate mock slides\nfunction generateSlides(formData: any, linkedIdea: any, linkedMVP: any) {\n  return [\n    {\n      title: \"Title Slide\",\n      content: {\n        title: formData.title,\n        subtitle: formData.description,\n        presenter: \"Founder & CEO\",\n      },\n    },\n    {\n      title: \"Problem\",\n      content: {\n        title: \"The Problem\",\n        description: linkedIdea?.problem_statement || \"Market problem description\",\n        statistics: [\"85% of target market experiences this issue\", \"Current solutions are inadequate\"],\n      },\n    },\n    {\n      title: \"Solution\",\n      content: {\n        title: \"Our Solution\",\n        description: linkedIdea?.solution_approach || formData.description,\n        features: linkedMVP?.features || [\"Key feature 1\", \"Key feature 2\", \"Key feature 3\"],\n      },\n    },\n    {\n      title: \"Market Opportunity\",\n      content: {\n        title: \"Market Opportunity\",\n        market_size: \"$2.5B TAM\",\n        target_market: formData.target_market || linkedIdea?.target_market,\n        growth_rate: \"15% CAGR\",\n      },\n    },\n    {\n      title: \"Business Model\",\n      content: {\n        title: \"Business Model\",\n        description: formData.business_model,\n        revenue_streams: [\"Primary revenue stream\", \"Secondary revenue stream\"],\n      },\n    },\n    {\n      title: \"Traction\",\n      content: {\n        title: \"Traction & Metrics\",\n        metrics: formData.traction_metrics.split(\"\\n\").filter(Boolean),\n        achievements: [\"Key milestone 1\", \"Key milestone 2\"],\n      },\n    },\n    {\n      title: \"Team\",\n      content: {\n        title: \"Our Team\",\n        description: formData.team_info,\n        advisors: [\"Industry expert\", \"Technical advisor\"],\n      },\n    },\n    {\n      title: \"Funding\",\n      content: {\n        title: \"Funding Request\",\n        amount: formData.funding_goal,\n        use_of_funds: [\"Product development 40%\", \"Marketing 30%\", \"Team expansion 20%\", \"Operations 10%\"],\n      },\n    },\n  ]\n}\n","size_bytes":18574},"app/dashboard/pitch/[id]/edit/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { SlideEditor } from \"@/components/slide-editor\"\nimport { Button } from \"@/components/ui/button\"\nimport { ArrowLeft, Save } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function EditPitchDeckPage({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const [pitchDeck, setPitchDeck] = useState<any>(null)\n  const [slides, setSlides] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [saving, setSaving] = useState(false)\n  const router = useRouter()\n\n  useEffect(() => {\n    const fetchPitchDeck = async () => {\n      const { id } = await params\n      const supabase = createClient()\n\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) {\n        router.push(\"/auth/login\")\n        return\n      }\n\n      const { data, error } = await supabase\n        .from(\"pitch_decks\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .eq(\"user_id\", user.id)\n        .single()\n\n      if (error || !data) {\n        router.push(\"/dashboard/pitch\")\n        return\n      }\n\n      setPitchDeck(data)\n      setSlides(data.slides || [])\n      setLoading(false)\n    }\n\n    fetchPitchDeck()\n  }, [params, router])\n\n  const handleSave = async () => {\n    if (!pitchDeck) return\n\n    setSaving(true)\n    const supabase = createClient()\n\n    try {\n      const { error } = await supabase.from(\"pitch_decks\").update({ slides }).eq(\"id\", pitchDeck.id)\n\n      if (error) throw error\n\n      router.push(`/dashboard/pitch/${pitchDeck.id}`)\n    } catch (error) {\n      console.error(\"Error saving slides:\", error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-accent mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading editor...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href={`/dashboard/pitch/${pitchDeck?.id}`} className=\"text-muted-foreground hover:text-foreground\">\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\">Edit Pitch Deck</h1>\n            <p className=\"text-muted-foreground\">{pitchDeck?.title}</p>\n          </div>\n        </div>\n        <Button\n          onClick={handleSave}\n          disabled={saving}\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n        >\n          <Save className=\"h-4 w-4 mr-2\" />\n          {saving ? \"Saving...\" : \"Save Changes\"}\n        </Button>\n      </div>\n\n      {/* Editor */}\n      <div className=\"h-[calc(100vh-200px)]\">\n        <SlideEditor slides={slides} onSlidesChange={setSlides} onSave={handleSave} />\n      </div>\n    </div>\n  )\n}\n","size_bytes":3176},"app/dashboard/pitch/[id]/present/page.tsx":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { ArrowLeft, ChevronLeft, ChevronRight, Maximize, Minimize, Play, Pause } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function PresentPitchDeckPage({\n  params,\n}: {\n  params: Promise<{ id: string }>\n}) {\n  const [pitchDeck, setPitchDeck] = useState<any>(null)\n  const [currentSlide, setCurrentSlide] = useState(0)\n  const [isFullscreen, setIsFullscreen] = useState(false)\n  const [isAutoPlay, setIsAutoPlay] = useState(false)\n  const [loading, setLoading] = useState(true)\n  const router = useRouter()\n\n  useEffect(() => {\n    const fetchPitchDeck = async () => {\n      const { id } = await params\n      const supabase = createClient()\n\n      const {\n        data: { user },\n      } = await supabase.auth.getUser()\n      if (!user) {\n        router.push(\"/auth/login\")\n        return\n      }\n\n      const { data, error } = await supabase\n        .from(\"pitch_decks\")\n        .select(\"*\")\n        .eq(\"id\", id)\n        .eq(\"user_id\", user.id)\n        .single()\n\n      if (error || !data) {\n        router.push(\"/dashboard/pitch\")\n        return\n      }\n\n      setPitchDeck(data)\n      setLoading(false)\n    }\n\n    fetchPitchDeck()\n  }, [params, router])\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout\n    if (isAutoPlay && pitchDeck?.slides) {\n      interval = setInterval(() => {\n        setCurrentSlide((prev) => (prev + 1) % pitchDeck.slides.length)\n      }, 10000) // 10 seconds per slide\n    }\n    return () => clearInterval(interval)\n  }, [isAutoPlay, pitchDeck?.slides])\n\n  const handleKeyPress = (e: KeyboardEvent) => {\n    if (e.key === \"ArrowRight\" || e.key === \" \") {\n      nextSlide()\n    } else if (e.key === \"ArrowLeft\") {\n      prevSlide()\n    } else if (e.key === \"Escape\") {\n      setIsFullscreen(false)\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyPress)\n    return () => document.removeEventListener(\"keydown\", handleKeyPress)\n  }, [currentSlide, pitchDeck?.slides])\n\n  const nextSlide = () => {\n    if (pitchDeck?.slides && currentSlide < pitchDeck.slides.length - 1) {\n      setCurrentSlide(currentSlide + 1)\n    }\n  }\n\n  const prevSlide = () => {\n    if (currentSlide > 0) {\n      setCurrentSlide(currentSlide - 1)\n    }\n  }\n\n  const toggleFullscreen = () => {\n    if (!isFullscreen) {\n      document.documentElement.requestFullscreen()\n    } else {\n      document.exitFullscreen()\n    }\n    setIsFullscreen(!isFullscreen)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-accent mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading presentation...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!pitchDeck?.slides || pitchDeck.slides.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-muted-foreground mb-4\">No slides available</p>\n          <Button asChild>\n            <Link href={`/dashboard/pitch/${pitchDeck?.id}`}>Back to Pitch Deck</Link>\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  const slides = pitchDeck.slides as any[]\n  const currentSlideData = slides[currentSlide]\n\n  return (\n    <div className={`${isFullscreen ? \"fixed inset-0 z-50 bg-background\" : \"p-6\"}`}>\n      {/* Header - Hidden in fullscreen */}\n      {!isFullscreen && (\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href={`/dashboard/pitch/${pitchDeck.id}`} className=\"text-muted-foreground hover:text-foreground\">\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Link>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\">{pitchDeck.title}</h1>\n              <p className=\"text-muted-foreground\">\n                Slide {currentSlide + 1} of {slides.length}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => setIsAutoPlay(!isAutoPlay)} className=\"bg-transparent\">\n              {isAutoPlay ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n              {isAutoPlay ? \"Pause\" : \"Auto Play\"}\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={toggleFullscreen} className=\"bg-transparent\">\n              <Maximize className=\"h-4 w-4\" />\n              Fullscreen\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Slide Content */}\n      <div className={`${isFullscreen ? \"h-full flex flex-col\" : \"max-w-6xl mx-auto\"}`}>\n        <Card className={`${isFullscreen ? \"flex-1 border-0 rounded-none\" : \"\"} bg-card border-border`}>\n          <CardContent className={`${isFullscreen ? \"h-full flex flex-col justify-center\" : \"aspect-video\"} p-12`}>\n            <div className=\"text-center space-y-6\">\n              <h2 className=\"text-4xl font-bold text-foreground mb-8\">\n                {currentSlideData.content?.title || currentSlideData.title}\n              </h2>\n\n              {/* Render different slide types */}\n              {currentSlideData.title === \"Title Slide\" && (\n                <div className=\"space-y-4\">\n                  <p className=\"text-xl text-muted-foreground\">{currentSlideData.content?.subtitle}</p>\n                  <p className=\"text-lg text-accent\">{currentSlideData.content?.presenter}</p>\n                  <p className=\"text-sm text-muted-foreground\">{currentSlideData.content?.date}</p>\n                </div>\n              )}\n\n              {currentSlideData.title === \"Problem\" && (\n                <div className=\"space-y-6\">\n                  <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n                    {currentSlideData.content?.description}\n                  </p>\n                  {currentSlideData.content?.pain_points && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-8\">\n                      {currentSlideData.content.pain_points.map((point: string, index: number) => (\n                        <div key={index} className=\"p-4 bg-red-500/10 rounded-lg border border-red-500/20\">\n                          <p className=\"text-sm text-foreground\">{point}</p>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                  {currentSlideData.content?.market_validation && (\n                    <div className=\"mt-6 p-4 bg-accent/10 rounded-lg border border-accent/20\">\n                      <p className=\"text-lg font-semibold text-accent\">{currentSlideData.content.market_validation}</p>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {currentSlideData.title === \"Solution\" && (\n                <div className=\"space-y-6\">\n                  <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n                    {currentSlideData.content?.description}\n                  </p>\n                  {currentSlideData.content?.key_benefits && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-8\">\n                      {currentSlideData.content.key_benefits.map((benefit: string, index: number) => (\n                        <div key={index} className=\"p-4 bg-green-500/10 rounded-lg border border-green-500/20\">\n                          <p className=\"text-sm text-foreground\">{benefit}</p>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {currentSlideData.title === \"Market Opportunity\" && (\n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"p-6 bg-accent/10 rounded-lg border border-accent/20\">\n                      <h4 className=\"font-semibold text-foreground mb-2\">TAM</h4>\n                      <p className=\"text-2xl font-bold text-accent\">{currentSlideData.content?.tam}</p>\n                    </div>\n                    <div className=\"p-6 bg-accent/10 rounded-lg border border-accent/20\">\n                      <h4 className=\"font-semibold text-foreground mb-2\">SAM</h4>\n                      <p className=\"text-2xl font-bold text-accent\">{currentSlideData.content?.sam}</p>\n                    </div>\n                    <div className=\"p-6 bg-accent/10 rounded-lg border border-accent/20\">\n                      <h4 className=\"font-semibold text-foreground mb-2\">SOM</h4>\n                      <p className=\"text-2xl font-bold text-accent\">{currentSlideData.content?.som}</p>\n                    </div>\n                  </div>\n                  {currentSlideData.content?.growth_rate && (\n                    <p className=\"text-lg text-muted-foreground\">{currentSlideData.content.growth_rate}</p>\n                  )}\n                </div>\n              )}\n\n              {currentSlideData.title === \"Funding Request\" && (\n                <div className=\"space-y-6\">\n                  <div className=\"p-8 bg-accent/10 rounded-lg border border-accent/20\">\n                    <h3 className=\"text-3xl font-bold text-accent mb-2\">Seeking</h3>\n                    <p className=\"text-5xl font-bold text-foreground\">{currentSlideData.content?.funding_goal}</p>\n                  </div>\n                  {currentSlideData.content?.use_of_funds && (\n                    <div className=\"grid grid-cols-2 gap-4 mt-8\">\n                      {currentSlideData.content.use_of_funds.map((item: string, index: number) => (\n                        <div key={index} className=\"p-4 bg-muted/20 rounded-lg\">\n                          <p className=\"text-sm text-foreground\">{item}</p>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Default content for other slides */}\n              {![\"Title Slide\", \"Problem\", \"Solution\", \"Market Opportunity\", \"Funding Request\"].includes(\n                currentSlideData.title,\n              ) && (\n                <div className=\"space-y-4\">\n                  <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n                    {currentSlideData.content?.description}\n                  </p>\n                  {currentSlideData.content?.features && (\n                    <div className=\"flex flex-wrap justify-center gap-2 mt-4\">\n                      {currentSlideData.content.features.map((feature: string, index: number) => (\n                        <span key={index} className=\"px-3 py-1 bg-accent/10 text-accent rounded-full text-sm\">\n                          {feature}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Navigation Controls */}\n        <div\n          className={`${isFullscreen ? \"absolute bottom-4 left-1/2 transform -translate-x-1/2\" : \"mt-6\"} flex items-center justify-center space-x-4`}\n        >\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={prevSlide}\n            disabled={currentSlide === 0}\n            className=\"bg-background/80 backdrop-blur-sm\"\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n            Previous\n          </Button>\n\n          <div className=\"flex items-center space-x-2\">\n            {slides.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentSlide(index)}\n                className={`w-2 h-2 rounded-full transition-colors ${\n                  index === currentSlide ? \"bg-accent\" : \"bg-muted-foreground/30\"\n                }`}\n              />\n            ))}\n          </div>\n\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={nextSlide}\n            disabled={currentSlide === slides.length - 1}\n            className=\"bg-background/80 backdrop-blur-sm\"\n          >\n            Next\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n\n          {isFullscreen && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={toggleFullscreen}\n              className=\"bg-background/80 backdrop-blur-sm ml-4\"\n            >\n              <Minimize className=\"h-4 w-4\" />\n              Exit\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Slide counter in fullscreen */}\n      {isFullscreen && (\n        <div className=\"absolute top-4 right-4 bg-background/80 backdrop-blur-sm px-3 py-1 rounded-full text-sm text-muted-foreground\">\n          {currentSlide + 1} / {slides.length}\n        </div>\n      )}\n    </div>\n  )\n}\n","size_bytes":13187}},"version":1}